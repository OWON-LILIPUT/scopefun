# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_scopefunapi')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_scopefunapi')
    _scopefunapi = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_scopefunapi', [dirname(__file__)])
        except ImportError:
            import _scopefunapi
            return _scopefunapi
        try:
            _mod = imp.load_module('_scopefunapi', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _scopefunapi = swig_import_helper()
    del swig_import_helper
else:
    import _scopefunapi
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

HARDWARE_VERSION_1 = _scopefunapi.HARDWARE_VERSION_1
HARDWARE_VERSION_2 = _scopefunapi.HARDWARE_VERSION_2
SCOPEFUN_FRAME_1_HEADER = _scopefunapi.SCOPEFUN_FRAME_1_HEADER
SCOPEFUN_FRAME_1_DATA = _scopefunapi.SCOPEFUN_FRAME_1_DATA
SCOPEFUN_FRAME_1_PACKET = _scopefunapi.SCOPEFUN_FRAME_1_PACKET
SCOPEFUN_FRAME_2_HEADER = _scopefunapi.SCOPEFUN_FRAME_2_HEADER
SCOPEFUN_FRAME_2_DATA = _scopefunapi.SCOPEFUN_FRAME_2_DATA
SCOPEFUN_FRAME_2_PACKET = _scopefunapi.SCOPEFUN_FRAME_2_PACKET
SCOPEFUN_FRAME_DATA = _scopefunapi.SCOPEFUN_FRAME_DATA
SCOPEFUN_FRAME_MEMORY = _scopefunapi.SCOPEFUN_FRAME_MEMORY
SCOPEFUN_FRAME_PACKET = _scopefunapi.SCOPEFUN_FRAME_PACKET
SCOPEFUN_INVALID_CLIENT = _scopefunapi.SCOPEFUN_INVALID_CLIENT
SCOPEFUN_MAX_CLIENT = _scopefunapi.SCOPEFUN_MAX_CLIENT
SCOPEFUN_SERVER_ID = _scopefunapi.SCOPEFUN_SERVER_ID
SCOPEFUN_DISPLAY = _scopefunapi.SCOPEFUN_DISPLAY
SCOPEFUN_FIRMWARE_FX2 = _scopefunapi.SCOPEFUN_FIRMWARE_FX2
SCOPEFUN_FIRMWARE_FPGA = _scopefunapi.SCOPEFUN_FIRMWARE_FPGA
SCOPEFUN_EEPROM_BYTES = _scopefunapi.SCOPEFUN_EEPROM_BYTES
SCOPEFUN_EEPROM_FIRMWARE_NAME_BYTES = _scopefunapi.SCOPEFUN_EEPROM_FIRMWARE_NAME_BYTES
SCOPEFUN_GENERATOR = _scopefunapi.SCOPEFUN_GENERATOR
SCOPEFUN_CAPTURE_TYPE_NONE = _scopefunapi.SCOPEFUN_CAPTURE_TYPE_NONE
SCOPEFUN_CAPTURE_TYPE_HEADER = _scopefunapi.SCOPEFUN_CAPTURE_TYPE_HEADER
SCOPEFUN_CAPTURE_TYPE_DATA = _scopefunapi.SCOPEFUN_CAPTURE_TYPE_DATA
SCOPEFUN_SUCCESS = _scopefunapi.SCOPEFUN_SUCCESS
SCOPEFUN_FAILURE = _scopefunapi.SCOPEFUN_FAILURE
class SHardware1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SHardware1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SHardware1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["control"] = _scopefunapi.SHardware1_control_set
    __swig_getmethods__["control"] = _scopefunapi.SHardware1_control_get
    if _newclass:
        control = _swig_property(_scopefunapi.SHardware1_control_get, _scopefunapi.SHardware1_control_set)
    __swig_setmethods__["vgaina"] = _scopefunapi.SHardware1_vgaina_set
    __swig_getmethods__["vgaina"] = _scopefunapi.SHardware1_vgaina_get
    if _newclass:
        vgaina = _swig_property(_scopefunapi.SHardware1_vgaina_get, _scopefunapi.SHardware1_vgaina_set)
    __swig_setmethods__["vgainb"] = _scopefunapi.SHardware1_vgainb_set
    __swig_getmethods__["vgainb"] = _scopefunapi.SHardware1_vgainb_get
    if _newclass:
        vgainb = _swig_property(_scopefunapi.SHardware1_vgainb_get, _scopefunapi.SHardware1_vgainb_set)
    __swig_setmethods__["offseta"] = _scopefunapi.SHardware1_offseta_set
    __swig_getmethods__["offseta"] = _scopefunapi.SHardware1_offseta_get
    if _newclass:
        offseta = _swig_property(_scopefunapi.SHardware1_offseta_get, _scopefunapi.SHardware1_offseta_set)
    __swig_setmethods__["offsetb"] = _scopefunapi.SHardware1_offsetb_set
    __swig_getmethods__["offsetb"] = _scopefunapi.SHardware1_offsetb_get
    if _newclass:
        offsetb = _swig_property(_scopefunapi.SHardware1_offsetb_get, _scopefunapi.SHardware1_offsetb_set)
    __swig_setmethods__["siggen"] = _scopefunapi.SHardware1_siggen_set
    __swig_getmethods__["siggen"] = _scopefunapi.SHardware1_siggen_get
    if _newclass:
        siggen = _swig_property(_scopefunapi.SHardware1_siggen_get, _scopefunapi.SHardware1_siggen_set)
    __swig_setmethods__["trigger"] = _scopefunapi.SHardware1_trigger_set
    __swig_getmethods__["trigger"] = _scopefunapi.SHardware1_trigger_get
    if _newclass:
        trigger = _swig_property(_scopefunapi.SHardware1_trigger_get, _scopefunapi.SHardware1_trigger_set)
    __swig_setmethods__["analogswitch"] = _scopefunapi.SHardware1_analogswitch_set
    __swig_getmethods__["analogswitch"] = _scopefunapi.SHardware1_analogswitch_get
    if _newclass:
        analogswitch = _swig_property(_scopefunapi.SHardware1_analogswitch_get, _scopefunapi.SHardware1_analogswitch_set)
    __swig_setmethods__["triggerMode"] = _scopefunapi.SHardware1_triggerMode_set
    __swig_getmethods__["triggerMode"] = _scopefunapi.SHardware1_triggerMode_get
    if _newclass:
        triggerMode = _swig_property(_scopefunapi.SHardware1_triggerMode_get, _scopefunapi.SHardware1_triggerMode_set)
    __swig_setmethods__["triggerSource"] = _scopefunapi.SHardware1_triggerSource_set
    __swig_getmethods__["triggerSource"] = _scopefunapi.SHardware1_triggerSource_get
    if _newclass:
        triggerSource = _swig_property(_scopefunapi.SHardware1_triggerSource_get, _scopefunapi.SHardware1_triggerSource_set)
    __swig_setmethods__["triggerSlope"] = _scopefunapi.SHardware1_triggerSlope_set
    __swig_getmethods__["triggerSlope"] = _scopefunapi.SHardware1_triggerSlope_get
    if _newclass:
        triggerSlope = _swig_property(_scopefunapi.SHardware1_triggerSlope_get, _scopefunapi.SHardware1_triggerSlope_set)
    __swig_setmethods__["triggerLevel"] = _scopefunapi.SHardware1_triggerLevel_set
    __swig_getmethods__["triggerLevel"] = _scopefunapi.SHardware1_triggerLevel_get
    if _newclass:
        triggerLevel = _swig_property(_scopefunapi.SHardware1_triggerLevel_get, _scopefunapi.SHardware1_triggerLevel_set)
    __swig_setmethods__["triggerHis"] = _scopefunapi.SHardware1_triggerHis_set
    __swig_getmethods__["triggerHis"] = _scopefunapi.SHardware1_triggerHis_get
    if _newclass:
        triggerHis = _swig_property(_scopefunapi.SHardware1_triggerHis_get, _scopefunapi.SHardware1_triggerHis_set)
    __swig_setmethods__["triggerPercent"] = _scopefunapi.SHardware1_triggerPercent_set
    __swig_getmethods__["triggerPercent"] = _scopefunapi.SHardware1_triggerPercent_get
    if _newclass:
        triggerPercent = _swig_property(_scopefunapi.SHardware1_triggerPercent_get, _scopefunapi.SHardware1_triggerPercent_set)
    __swig_setmethods__["xRange"] = _scopefunapi.SHardware1_xRange_set
    __swig_getmethods__["xRange"] = _scopefunapi.SHardware1_xRange_get
    if _newclass:
        xRange = _swig_property(_scopefunapi.SHardware1_xRange_get, _scopefunapi.SHardware1_xRange_set)
    __swig_setmethods__["sampleSize"] = _scopefunapi.SHardware1_sampleSize_set
    __swig_getmethods__["sampleSize"] = _scopefunapi.SHardware1_sampleSize_get
    if _newclass:
        sampleSize = _swig_property(_scopefunapi.SHardware1_sampleSize_get, _scopefunapi.SHardware1_sampleSize_set)
    __swig_setmethods__["holdoffH"] = _scopefunapi.SHardware1_holdoffH_set
    __swig_getmethods__["holdoffH"] = _scopefunapi.SHardware1_holdoffH_get
    if _newclass:
        holdoffH = _swig_property(_scopefunapi.SHardware1_holdoffH_get, _scopefunapi.SHardware1_holdoffH_set)
    __swig_setmethods__["holdoffL"] = _scopefunapi.SHardware1_holdoffL_set
    __swig_getmethods__["holdoffL"] = _scopefunapi.SHardware1_holdoffL_get
    if _newclass:
        holdoffL = _swig_property(_scopefunapi.SHardware1_holdoffL_get, _scopefunapi.SHardware1_holdoffL_set)
    __swig_setmethods__["generatorType0"] = _scopefunapi.SHardware1_generatorType0_set
    __swig_getmethods__["generatorType0"] = _scopefunapi.SHardware1_generatorType0_get
    if _newclass:
        generatorType0 = _swig_property(_scopefunapi.SHardware1_generatorType0_get, _scopefunapi.SHardware1_generatorType0_set)
    __swig_setmethods__["generatorVoltage0"] = _scopefunapi.SHardware1_generatorVoltage0_set
    __swig_getmethods__["generatorVoltage0"] = _scopefunapi.SHardware1_generatorVoltage0_get
    if _newclass:
        generatorVoltage0 = _swig_property(_scopefunapi.SHardware1_generatorVoltage0_get, _scopefunapi.SHardware1_generatorVoltage0_set)
    __swig_setmethods__["generatorOffset0"] = _scopefunapi.SHardware1_generatorOffset0_set
    __swig_getmethods__["generatorOffset0"] = _scopefunapi.SHardware1_generatorOffset0_get
    if _newclass:
        generatorOffset0 = _swig_property(_scopefunapi.SHardware1_generatorOffset0_get, _scopefunapi.SHardware1_generatorOffset0_set)
    __swig_setmethods__["generatorDeltaH0"] = _scopefunapi.SHardware1_generatorDeltaH0_set
    __swig_getmethods__["generatorDeltaH0"] = _scopefunapi.SHardware1_generatorDeltaH0_get
    if _newclass:
        generatorDeltaH0 = _swig_property(_scopefunapi.SHardware1_generatorDeltaH0_get, _scopefunapi.SHardware1_generatorDeltaH0_set)
    __swig_setmethods__["generatorDeltaL0"] = _scopefunapi.SHardware1_generatorDeltaL0_set
    __swig_getmethods__["generatorDeltaL0"] = _scopefunapi.SHardware1_generatorDeltaL0_get
    if _newclass:
        generatorDeltaL0 = _swig_property(_scopefunapi.SHardware1_generatorDeltaL0_get, _scopefunapi.SHardware1_generatorDeltaL0_set)
    __swig_setmethods__["generatorSqueareDuty0"] = _scopefunapi.SHardware1_generatorSqueareDuty0_set
    __swig_getmethods__["generatorSqueareDuty0"] = _scopefunapi.SHardware1_generatorSqueareDuty0_get
    if _newclass:
        generatorSqueareDuty0 = _swig_property(_scopefunapi.SHardware1_generatorSqueareDuty0_get, _scopefunapi.SHardware1_generatorSqueareDuty0_set)
    __swig_setmethods__["generatorType1"] = _scopefunapi.SHardware1_generatorType1_set
    __swig_getmethods__["generatorType1"] = _scopefunapi.SHardware1_generatorType1_get
    if _newclass:
        generatorType1 = _swig_property(_scopefunapi.SHardware1_generatorType1_get, _scopefunapi.SHardware1_generatorType1_set)
    __swig_setmethods__["generatorVoltage1"] = _scopefunapi.SHardware1_generatorVoltage1_set
    __swig_getmethods__["generatorVoltage1"] = _scopefunapi.SHardware1_generatorVoltage1_get
    if _newclass:
        generatorVoltage1 = _swig_property(_scopefunapi.SHardware1_generatorVoltage1_get, _scopefunapi.SHardware1_generatorVoltage1_set)
    __swig_setmethods__["generatorOffset1"] = _scopefunapi.SHardware1_generatorOffset1_set
    __swig_getmethods__["generatorOffset1"] = _scopefunapi.SHardware1_generatorOffset1_get
    if _newclass:
        generatorOffset1 = _swig_property(_scopefunapi.SHardware1_generatorOffset1_get, _scopefunapi.SHardware1_generatorOffset1_set)
    __swig_setmethods__["generatorDeltaH1"] = _scopefunapi.SHardware1_generatorDeltaH1_set
    __swig_getmethods__["generatorDeltaH1"] = _scopefunapi.SHardware1_generatorDeltaH1_get
    if _newclass:
        generatorDeltaH1 = _swig_property(_scopefunapi.SHardware1_generatorDeltaH1_get, _scopefunapi.SHardware1_generatorDeltaH1_set)
    __swig_setmethods__["generatorDeltaL1"] = _scopefunapi.SHardware1_generatorDeltaL1_set
    __swig_getmethods__["generatorDeltaL1"] = _scopefunapi.SHardware1_generatorDeltaL1_get
    if _newclass:
        generatorDeltaL1 = _swig_property(_scopefunapi.SHardware1_generatorDeltaL1_get, _scopefunapi.SHardware1_generatorDeltaL1_set)
    __swig_setmethods__["generatorSqueareDuty1"] = _scopefunapi.SHardware1_generatorSqueareDuty1_set
    __swig_getmethods__["generatorSqueareDuty1"] = _scopefunapi.SHardware1_generatorSqueareDuty1_get
    if _newclass:
        generatorSqueareDuty1 = _swig_property(_scopefunapi.SHardware1_generatorSqueareDuty1_get, _scopefunapi.SHardware1_generatorSqueareDuty1_set)
    __swig_setmethods__["digitalPattern1a"] = _scopefunapi.SHardware1_digitalPattern1a_set
    __swig_getmethods__["digitalPattern1a"] = _scopefunapi.SHardware1_digitalPattern1a_get
    if _newclass:
        digitalPattern1a = _swig_property(_scopefunapi.SHardware1_digitalPattern1a_get, _scopefunapi.SHardware1_digitalPattern1a_set)
    __swig_setmethods__["digitalPattern1b"] = _scopefunapi.SHardware1_digitalPattern1b_set
    __swig_getmethods__["digitalPattern1b"] = _scopefunapi.SHardware1_digitalPattern1b_get
    if _newclass:
        digitalPattern1b = _swig_property(_scopefunapi.SHardware1_digitalPattern1b_get, _scopefunapi.SHardware1_digitalPattern1b_set)
    __swig_setmethods__["digitalMask1"] = _scopefunapi.SHardware1_digitalMask1_set
    __swig_getmethods__["digitalMask1"] = _scopefunapi.SHardware1_digitalMask1_get
    if _newclass:
        digitalMask1 = _swig_property(_scopefunapi.SHardware1_digitalMask1_get, _scopefunapi.SHardware1_digitalMask1_set)
    __swig_setmethods__["digitalPattern2a"] = _scopefunapi.SHardware1_digitalPattern2a_set
    __swig_getmethods__["digitalPattern2a"] = _scopefunapi.SHardware1_digitalPattern2a_get
    if _newclass:
        digitalPattern2a = _swig_property(_scopefunapi.SHardware1_digitalPattern2a_get, _scopefunapi.SHardware1_digitalPattern2a_set)
    __swig_setmethods__["digitalPattern2b"] = _scopefunapi.SHardware1_digitalPattern2b_set
    __swig_getmethods__["digitalPattern2b"] = _scopefunapi.SHardware1_digitalPattern2b_get
    if _newclass:
        digitalPattern2b = _swig_property(_scopefunapi.SHardware1_digitalPattern2b_get, _scopefunapi.SHardware1_digitalPattern2b_set)
    __swig_setmethods__["digitalMask2"] = _scopefunapi.SHardware1_digitalMask2_set
    __swig_getmethods__["digitalMask2"] = _scopefunapi.SHardware1_digitalMask2_get
    if _newclass:
        digitalMask2 = _swig_property(_scopefunapi.SHardware1_digitalMask2_get, _scopefunapi.SHardware1_digitalMask2_set)
    __swig_setmethods__["digitalPattern3a"] = _scopefunapi.SHardware1_digitalPattern3a_set
    __swig_getmethods__["digitalPattern3a"] = _scopefunapi.SHardware1_digitalPattern3a_get
    if _newclass:
        digitalPattern3a = _swig_property(_scopefunapi.SHardware1_digitalPattern3a_get, _scopefunapi.SHardware1_digitalPattern3a_set)
    __swig_setmethods__["digitalPattern3b"] = _scopefunapi.SHardware1_digitalPattern3b_set
    __swig_getmethods__["digitalPattern3b"] = _scopefunapi.SHardware1_digitalPattern3b_get
    if _newclass:
        digitalPattern3b = _swig_property(_scopefunapi.SHardware1_digitalPattern3b_get, _scopefunapi.SHardware1_digitalPattern3b_set)
    __swig_setmethods__["digitalMask3"] = _scopefunapi.SHardware1_digitalMask3_set
    __swig_getmethods__["digitalMask3"] = _scopefunapi.SHardware1_digitalMask3_get
    if _newclass:
        digitalMask3 = _swig_property(_scopefunapi.SHardware1_digitalMask3_get, _scopefunapi.SHardware1_digitalMask3_set)
    __swig_setmethods__["digitalPattern4a"] = _scopefunapi.SHardware1_digitalPattern4a_set
    __swig_getmethods__["digitalPattern4a"] = _scopefunapi.SHardware1_digitalPattern4a_get
    if _newclass:
        digitalPattern4a = _swig_property(_scopefunapi.SHardware1_digitalPattern4a_get, _scopefunapi.SHardware1_digitalPattern4a_set)
    __swig_setmethods__["digitalPattern4b"] = _scopefunapi.SHardware1_digitalPattern4b_set
    __swig_getmethods__["digitalPattern4b"] = _scopefunapi.SHardware1_digitalPattern4b_get
    if _newclass:
        digitalPattern4b = _swig_property(_scopefunapi.SHardware1_digitalPattern4b_get, _scopefunapi.SHardware1_digitalPattern4b_set)
    __swig_setmethods__["digitalMask4"] = _scopefunapi.SHardware1_digitalMask4_set
    __swig_getmethods__["digitalMask4"] = _scopefunapi.SHardware1_digitalMask4_get
    if _newclass:
        digitalMask4 = _swig_property(_scopefunapi.SHardware1_digitalMask4_get, _scopefunapi.SHardware1_digitalMask4_set)
    __swig_setmethods__["dt_delayMaxcnt1"] = _scopefunapi.SHardware1_dt_delayMaxcnt1_set
    __swig_getmethods__["dt_delayMaxcnt1"] = _scopefunapi.SHardware1_dt_delayMaxcnt1_get
    if _newclass:
        dt_delayMaxcnt1 = _swig_property(_scopefunapi.SHardware1_dt_delayMaxcnt1_get, _scopefunapi.SHardware1_dt_delayMaxcnt1_set)
    __swig_setmethods__["dt_delayMaxcnt2"] = _scopefunapi.SHardware1_dt_delayMaxcnt2_set
    __swig_getmethods__["dt_delayMaxcnt2"] = _scopefunapi.SHardware1_dt_delayMaxcnt2_get
    if _newclass:
        dt_delayMaxcnt2 = _swig_property(_scopefunapi.SHardware1_dt_delayMaxcnt2_get, _scopefunapi.SHardware1_dt_delayMaxcnt2_set)
    __swig_setmethods__["dt_delayMaxcnt3"] = _scopefunapi.SHardware1_dt_delayMaxcnt3_set
    __swig_getmethods__["dt_delayMaxcnt3"] = _scopefunapi.SHardware1_dt_delayMaxcnt3_get
    if _newclass:
        dt_delayMaxcnt3 = _swig_property(_scopefunapi.SHardware1_dt_delayMaxcnt3_get, _scopefunapi.SHardware1_dt_delayMaxcnt3_set)
    __swig_setmethods__["dt_delayMaxcnt4"] = _scopefunapi.SHardware1_dt_delayMaxcnt4_set
    __swig_getmethods__["dt_delayMaxcnt4"] = _scopefunapi.SHardware1_dt_delayMaxcnt4_get
    if _newclass:
        dt_delayMaxcnt4 = _swig_property(_scopefunapi.SHardware1_dt_delayMaxcnt4_get, _scopefunapi.SHardware1_dt_delayMaxcnt4_set)
    __swig_setmethods__["dt_control"] = _scopefunapi.SHardware1_dt_control_set
    __swig_getmethods__["dt_control"] = _scopefunapi.SHardware1_dt_control_get
    if _newclass:
        dt_control = _swig_property(_scopefunapi.SHardware1_dt_control_get, _scopefunapi.SHardware1_dt_control_set)
    __swig_setmethods__["digitalVoltage"] = _scopefunapi.SHardware1_digitalVoltage_set
    __swig_getmethods__["digitalVoltage"] = _scopefunapi.SHardware1_digitalVoltage_get
    if _newclass:
        digitalVoltage = _swig_property(_scopefunapi.SHardware1_digitalVoltage_get, _scopefunapi.SHardware1_digitalVoltage_set)
    __swig_setmethods__["digitalInputOutput"] = _scopefunapi.SHardware1_digitalInputOutput_set
    __swig_getmethods__["digitalInputOutput"] = _scopefunapi.SHardware1_digitalInputOutput_get
    if _newclass:
        digitalInputOutput = _swig_property(_scopefunapi.SHardware1_digitalInputOutput_get, _scopefunapi.SHardware1_digitalInputOutput_set)
    __swig_setmethods__["digitalOutputBit"] = _scopefunapi.SHardware1_digitalOutputBit_set
    __swig_getmethods__["digitalOutputBit"] = _scopefunapi.SHardware1_digitalOutputBit_get
    if _newclass:
        digitalOutputBit = _swig_property(_scopefunapi.SHardware1_digitalOutputBit_get, _scopefunapi.SHardware1_digitalOutputBit_set)
    __swig_setmethods__["digitalOutputMask"] = _scopefunapi.SHardware1_digitalOutputMask_set
    __swig_getmethods__["digitalOutputMask"] = _scopefunapi.SHardware1_digitalOutputMask_get
    if _newclass:
        digitalOutputMask = _swig_property(_scopefunapi.SHardware1_digitalOutputMask_get, _scopefunapi.SHardware1_digitalOutputMask_set)
    __swig_setmethods__["digitalClkDivideH"] = _scopefunapi.SHardware1_digitalClkDivideH_set
    __swig_getmethods__["digitalClkDivideH"] = _scopefunapi.SHardware1_digitalClkDivideH_get
    if _newclass:
        digitalClkDivideH = _swig_property(_scopefunapi.SHardware1_digitalClkDivideH_get, _scopefunapi.SHardware1_digitalClkDivideH_set)
    __swig_setmethods__["digitalClkDivideL"] = _scopefunapi.SHardware1_digitalClkDivideL_set
    __swig_getmethods__["digitalClkDivideL"] = _scopefunapi.SHardware1_digitalClkDivideL_get
    if _newclass:
        digitalClkDivideL = _swig_property(_scopefunapi.SHardware1_digitalClkDivideL_get, _scopefunapi.SHardware1_digitalClkDivideL_set)

    def __init__(self):
        this = _scopefunapi.new_SHardware1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SHardware1
    __del__ = lambda self: None
SHardware1_swigregister = _scopefunapi.SHardware1_swigregister
SHardware1_swigregister(SHardware1)

class SHardware2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SHardware2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SHardware2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["controlAddr"] = _scopefunapi.SHardware2_controlAddr_set
    __swig_getmethods__["controlAddr"] = _scopefunapi.SHardware2_controlAddr_get
    if _newclass:
        controlAddr = _swig_property(_scopefunapi.SHardware2_controlAddr_get, _scopefunapi.SHardware2_controlAddr_set)
    __swig_setmethods__["controlData"] = _scopefunapi.SHardware2_controlData_set
    __swig_getmethods__["controlData"] = _scopefunapi.SHardware2_controlData_get
    if _newclass:
        controlData = _swig_property(_scopefunapi.SHardware2_controlData_get, _scopefunapi.SHardware2_controlData_set)
    __swig_setmethods__["vgaina"] = _scopefunapi.SHardware2_vgaina_set
    __swig_getmethods__["vgaina"] = _scopefunapi.SHardware2_vgaina_get
    if _newclass:
        vgaina = _swig_property(_scopefunapi.SHardware2_vgaina_get, _scopefunapi.SHardware2_vgaina_set)
    __swig_setmethods__["vgainb"] = _scopefunapi.SHardware2_vgainb_set
    __swig_getmethods__["vgainb"] = _scopefunapi.SHardware2_vgainb_get
    if _newclass:
        vgainb = _swig_property(_scopefunapi.SHardware2_vgainb_get, _scopefunapi.SHardware2_vgainb_set)
    __swig_setmethods__["offseta"] = _scopefunapi.SHardware2_offseta_set
    __swig_getmethods__["offseta"] = _scopefunapi.SHardware2_offseta_get
    if _newclass:
        offseta = _swig_property(_scopefunapi.SHardware2_offseta_get, _scopefunapi.SHardware2_offseta_set)
    __swig_setmethods__["offsetb"] = _scopefunapi.SHardware2_offsetb_set
    __swig_getmethods__["offsetb"] = _scopefunapi.SHardware2_offsetb_get
    if _newclass:
        offsetb = _swig_property(_scopefunapi.SHardware2_offsetb_get, _scopefunapi.SHardware2_offsetb_set)
    __swig_setmethods__["analogswitch"] = _scopefunapi.SHardware2_analogswitch_set
    __swig_getmethods__["analogswitch"] = _scopefunapi.SHardware2_analogswitch_get
    if _newclass:
        analogswitch = _swig_property(_scopefunapi.SHardware2_analogswitch_get, _scopefunapi.SHardware2_analogswitch_set)
    __swig_setmethods__["triggerMode"] = _scopefunapi.SHardware2_triggerMode_set
    __swig_getmethods__["triggerMode"] = _scopefunapi.SHardware2_triggerMode_get
    if _newclass:
        triggerMode = _swig_property(_scopefunapi.SHardware2_triggerMode_get, _scopefunapi.SHardware2_triggerMode_set)
    __swig_setmethods__["triggerSource"] = _scopefunapi.SHardware2_triggerSource_set
    __swig_getmethods__["triggerSource"] = _scopefunapi.SHardware2_triggerSource_get
    if _newclass:
        triggerSource = _swig_property(_scopefunapi.SHardware2_triggerSource_get, _scopefunapi.SHardware2_triggerSource_set)
    __swig_setmethods__["triggerSlope"] = _scopefunapi.SHardware2_triggerSlope_set
    __swig_getmethods__["triggerSlope"] = _scopefunapi.SHardware2_triggerSlope_get
    if _newclass:
        triggerSlope = _swig_property(_scopefunapi.SHardware2_triggerSlope_get, _scopefunapi.SHardware2_triggerSlope_set)
    __swig_setmethods__["triggerLevel"] = _scopefunapi.SHardware2_triggerLevel_set
    __swig_getmethods__["triggerLevel"] = _scopefunapi.SHardware2_triggerLevel_get
    if _newclass:
        triggerLevel = _swig_property(_scopefunapi.SHardware2_triggerLevel_get, _scopefunapi.SHardware2_triggerLevel_set)
    __swig_setmethods__["triggerHis"] = _scopefunapi.SHardware2_triggerHis_set
    __swig_getmethods__["triggerHis"] = _scopefunapi.SHardware2_triggerHis_get
    if _newclass:
        triggerHis = _swig_property(_scopefunapi.SHardware2_triggerHis_get, _scopefunapi.SHardware2_triggerHis_set)
    __swig_setmethods__["triggerPercent"] = _scopefunapi.SHardware2_triggerPercent_set
    __swig_getmethods__["triggerPercent"] = _scopefunapi.SHardware2_triggerPercent_get
    if _newclass:
        triggerPercent = _swig_property(_scopefunapi.SHardware2_triggerPercent_get, _scopefunapi.SHardware2_triggerPercent_set)
    __swig_setmethods__["xRange"] = _scopefunapi.SHardware2_xRange_set
    __swig_getmethods__["xRange"] = _scopefunapi.SHardware2_xRange_get
    if _newclass:
        xRange = _swig_property(_scopefunapi.SHardware2_xRange_get, _scopefunapi.SHardware2_xRange_set)
    __swig_setmethods__["holdoffH"] = _scopefunapi.SHardware2_holdoffH_set
    __swig_getmethods__["holdoffH"] = _scopefunapi.SHardware2_holdoffH_get
    if _newclass:
        holdoffH = _swig_property(_scopefunapi.SHardware2_holdoffH_get, _scopefunapi.SHardware2_holdoffH_set)
    __swig_setmethods__["holdoffL"] = _scopefunapi.SHardware2_holdoffL_set
    __swig_getmethods__["holdoffL"] = _scopefunapi.SHardware2_holdoffL_get
    if _newclass:
        holdoffL = _swig_property(_scopefunapi.SHardware2_holdoffL_get, _scopefunapi.SHardware2_holdoffL_set)
    __swig_setmethods__["sampleSizeH"] = _scopefunapi.SHardware2_sampleSizeH_set
    __swig_getmethods__["sampleSizeH"] = _scopefunapi.SHardware2_sampleSizeH_get
    if _newclass:
        sampleSizeH = _swig_property(_scopefunapi.SHardware2_sampleSizeH_get, _scopefunapi.SHardware2_sampleSizeH_set)
    __swig_setmethods__["sampleSizeL"] = _scopefunapi.SHardware2_sampleSizeL_set
    __swig_getmethods__["sampleSizeL"] = _scopefunapi.SHardware2_sampleSizeL_get
    if _newclass:
        sampleSizeL = _swig_property(_scopefunapi.SHardware2_sampleSizeL_get, _scopefunapi.SHardware2_sampleSizeL_set)
    __swig_setmethods__["generatorType0"] = _scopefunapi.SHardware2_generatorType0_set
    __swig_getmethods__["generatorType0"] = _scopefunapi.SHardware2_generatorType0_get
    if _newclass:
        generatorType0 = _swig_property(_scopefunapi.SHardware2_generatorType0_get, _scopefunapi.SHardware2_generatorType0_set)
    __swig_setmethods__["generatorVoltage0"] = _scopefunapi.SHardware2_generatorVoltage0_set
    __swig_getmethods__["generatorVoltage0"] = _scopefunapi.SHardware2_generatorVoltage0_get
    if _newclass:
        generatorVoltage0 = _swig_property(_scopefunapi.SHardware2_generatorVoltage0_get, _scopefunapi.SHardware2_generatorVoltage0_set)
    __swig_setmethods__["generatorOffset0"] = _scopefunapi.SHardware2_generatorOffset0_set
    __swig_getmethods__["generatorOffset0"] = _scopefunapi.SHardware2_generatorOffset0_get
    if _newclass:
        generatorOffset0 = _swig_property(_scopefunapi.SHardware2_generatorOffset0_get, _scopefunapi.SHardware2_generatorOffset0_set)
    __swig_setmethods__["generatorDeltaH0"] = _scopefunapi.SHardware2_generatorDeltaH0_set
    __swig_getmethods__["generatorDeltaH0"] = _scopefunapi.SHardware2_generatorDeltaH0_get
    if _newclass:
        generatorDeltaH0 = _swig_property(_scopefunapi.SHardware2_generatorDeltaH0_get, _scopefunapi.SHardware2_generatorDeltaH0_set)
    __swig_setmethods__["generatorDeltaL0"] = _scopefunapi.SHardware2_generatorDeltaL0_set
    __swig_getmethods__["generatorDeltaL0"] = _scopefunapi.SHardware2_generatorDeltaL0_get
    if _newclass:
        generatorDeltaL0 = _swig_property(_scopefunapi.SHardware2_generatorDeltaL0_get, _scopefunapi.SHardware2_generatorDeltaL0_set)
    __swig_setmethods__["generatorSqueareDuty0"] = _scopefunapi.SHardware2_generatorSqueareDuty0_set
    __swig_getmethods__["generatorSqueareDuty0"] = _scopefunapi.SHardware2_generatorSqueareDuty0_get
    if _newclass:
        generatorSqueareDuty0 = _swig_property(_scopefunapi.SHardware2_generatorSqueareDuty0_get, _scopefunapi.SHardware2_generatorSqueareDuty0_set)
    __swig_setmethods__["generatorType1"] = _scopefunapi.SHardware2_generatorType1_set
    __swig_getmethods__["generatorType1"] = _scopefunapi.SHardware2_generatorType1_get
    if _newclass:
        generatorType1 = _swig_property(_scopefunapi.SHardware2_generatorType1_get, _scopefunapi.SHardware2_generatorType1_set)
    __swig_setmethods__["generatorVoltage1"] = _scopefunapi.SHardware2_generatorVoltage1_set
    __swig_getmethods__["generatorVoltage1"] = _scopefunapi.SHardware2_generatorVoltage1_get
    if _newclass:
        generatorVoltage1 = _swig_property(_scopefunapi.SHardware2_generatorVoltage1_get, _scopefunapi.SHardware2_generatorVoltage1_set)
    __swig_setmethods__["generatorOffset1"] = _scopefunapi.SHardware2_generatorOffset1_set
    __swig_getmethods__["generatorOffset1"] = _scopefunapi.SHardware2_generatorOffset1_get
    if _newclass:
        generatorOffset1 = _swig_property(_scopefunapi.SHardware2_generatorOffset1_get, _scopefunapi.SHardware2_generatorOffset1_set)
    __swig_setmethods__["generatorDeltaH1"] = _scopefunapi.SHardware2_generatorDeltaH1_set
    __swig_getmethods__["generatorDeltaH1"] = _scopefunapi.SHardware2_generatorDeltaH1_get
    if _newclass:
        generatorDeltaH1 = _swig_property(_scopefunapi.SHardware2_generatorDeltaH1_get, _scopefunapi.SHardware2_generatorDeltaH1_set)
    __swig_setmethods__["generatorDeltaL1"] = _scopefunapi.SHardware2_generatorDeltaL1_set
    __swig_getmethods__["generatorDeltaL1"] = _scopefunapi.SHardware2_generatorDeltaL1_get
    if _newclass:
        generatorDeltaL1 = _swig_property(_scopefunapi.SHardware2_generatorDeltaL1_get, _scopefunapi.SHardware2_generatorDeltaL1_set)
    __swig_setmethods__["generatorSqueareDuty1"] = _scopefunapi.SHardware2_generatorSqueareDuty1_set
    __swig_getmethods__["generatorSqueareDuty1"] = _scopefunapi.SHardware2_generatorSqueareDuty1_get
    if _newclass:
        generatorSqueareDuty1 = _swig_property(_scopefunapi.SHardware2_generatorSqueareDuty1_get, _scopefunapi.SHardware2_generatorSqueareDuty1_set)
    __swig_setmethods__["digitalPattern1a"] = _scopefunapi.SHardware2_digitalPattern1a_set
    __swig_getmethods__["digitalPattern1a"] = _scopefunapi.SHardware2_digitalPattern1a_get
    if _newclass:
        digitalPattern1a = _swig_property(_scopefunapi.SHardware2_digitalPattern1a_get, _scopefunapi.SHardware2_digitalPattern1a_set)
    __swig_setmethods__["digitalPattern1b"] = _scopefunapi.SHardware2_digitalPattern1b_set
    __swig_getmethods__["digitalPattern1b"] = _scopefunapi.SHardware2_digitalPattern1b_get
    if _newclass:
        digitalPattern1b = _swig_property(_scopefunapi.SHardware2_digitalPattern1b_get, _scopefunapi.SHardware2_digitalPattern1b_set)
    __swig_setmethods__["digitalMask1"] = _scopefunapi.SHardware2_digitalMask1_set
    __swig_getmethods__["digitalMask1"] = _scopefunapi.SHardware2_digitalMask1_get
    if _newclass:
        digitalMask1 = _swig_property(_scopefunapi.SHardware2_digitalMask1_get, _scopefunapi.SHardware2_digitalMask1_set)
    __swig_setmethods__["digitalPattern2a"] = _scopefunapi.SHardware2_digitalPattern2a_set
    __swig_getmethods__["digitalPattern2a"] = _scopefunapi.SHardware2_digitalPattern2a_get
    if _newclass:
        digitalPattern2a = _swig_property(_scopefunapi.SHardware2_digitalPattern2a_get, _scopefunapi.SHardware2_digitalPattern2a_set)
    __swig_setmethods__["digitalPattern2b"] = _scopefunapi.SHardware2_digitalPattern2b_set
    __swig_getmethods__["digitalPattern2b"] = _scopefunapi.SHardware2_digitalPattern2b_get
    if _newclass:
        digitalPattern2b = _swig_property(_scopefunapi.SHardware2_digitalPattern2b_get, _scopefunapi.SHardware2_digitalPattern2b_set)
    __swig_setmethods__["digitalMask2"] = _scopefunapi.SHardware2_digitalMask2_set
    __swig_getmethods__["digitalMask2"] = _scopefunapi.SHardware2_digitalMask2_get
    if _newclass:
        digitalMask2 = _swig_property(_scopefunapi.SHardware2_digitalMask2_get, _scopefunapi.SHardware2_digitalMask2_set)
    __swig_setmethods__["digitalPattern3a"] = _scopefunapi.SHardware2_digitalPattern3a_set
    __swig_getmethods__["digitalPattern3a"] = _scopefunapi.SHardware2_digitalPattern3a_get
    if _newclass:
        digitalPattern3a = _swig_property(_scopefunapi.SHardware2_digitalPattern3a_get, _scopefunapi.SHardware2_digitalPattern3a_set)
    __swig_setmethods__["digitalPattern3b"] = _scopefunapi.SHardware2_digitalPattern3b_set
    __swig_getmethods__["digitalPattern3b"] = _scopefunapi.SHardware2_digitalPattern3b_get
    if _newclass:
        digitalPattern3b = _swig_property(_scopefunapi.SHardware2_digitalPattern3b_get, _scopefunapi.SHardware2_digitalPattern3b_set)
    __swig_setmethods__["digitalMask3"] = _scopefunapi.SHardware2_digitalMask3_set
    __swig_getmethods__["digitalMask3"] = _scopefunapi.SHardware2_digitalMask3_get
    if _newclass:
        digitalMask3 = _swig_property(_scopefunapi.SHardware2_digitalMask3_get, _scopefunapi.SHardware2_digitalMask3_set)
    __swig_setmethods__["digitalPattern4a"] = _scopefunapi.SHardware2_digitalPattern4a_set
    __swig_getmethods__["digitalPattern4a"] = _scopefunapi.SHardware2_digitalPattern4a_get
    if _newclass:
        digitalPattern4a = _swig_property(_scopefunapi.SHardware2_digitalPattern4a_get, _scopefunapi.SHardware2_digitalPattern4a_set)
    __swig_setmethods__["digitalPattern4b"] = _scopefunapi.SHardware2_digitalPattern4b_set
    __swig_getmethods__["digitalPattern4b"] = _scopefunapi.SHardware2_digitalPattern4b_get
    if _newclass:
        digitalPattern4b = _swig_property(_scopefunapi.SHardware2_digitalPattern4b_get, _scopefunapi.SHardware2_digitalPattern4b_set)
    __swig_setmethods__["digitalMask4"] = _scopefunapi.SHardware2_digitalMask4_set
    __swig_getmethods__["digitalMask4"] = _scopefunapi.SHardware2_digitalMask4_get
    if _newclass:
        digitalMask4 = _swig_property(_scopefunapi.SHardware2_digitalMask4_get, _scopefunapi.SHardware2_digitalMask4_set)
    __swig_setmethods__["dt_delayMaxcnt1"] = _scopefunapi.SHardware2_dt_delayMaxcnt1_set
    __swig_getmethods__["dt_delayMaxcnt1"] = _scopefunapi.SHardware2_dt_delayMaxcnt1_get
    if _newclass:
        dt_delayMaxcnt1 = _swig_property(_scopefunapi.SHardware2_dt_delayMaxcnt1_get, _scopefunapi.SHardware2_dt_delayMaxcnt1_set)
    __swig_setmethods__["dt_delayMaxcnt2"] = _scopefunapi.SHardware2_dt_delayMaxcnt2_set
    __swig_getmethods__["dt_delayMaxcnt2"] = _scopefunapi.SHardware2_dt_delayMaxcnt2_get
    if _newclass:
        dt_delayMaxcnt2 = _swig_property(_scopefunapi.SHardware2_dt_delayMaxcnt2_get, _scopefunapi.SHardware2_dt_delayMaxcnt2_set)
    __swig_setmethods__["dt_delayMaxcnt3"] = _scopefunapi.SHardware2_dt_delayMaxcnt3_set
    __swig_getmethods__["dt_delayMaxcnt3"] = _scopefunapi.SHardware2_dt_delayMaxcnt3_get
    if _newclass:
        dt_delayMaxcnt3 = _swig_property(_scopefunapi.SHardware2_dt_delayMaxcnt3_get, _scopefunapi.SHardware2_dt_delayMaxcnt3_set)
    __swig_setmethods__["dt_delayMaxcnt4"] = _scopefunapi.SHardware2_dt_delayMaxcnt4_set
    __swig_getmethods__["dt_delayMaxcnt4"] = _scopefunapi.SHardware2_dt_delayMaxcnt4_get
    if _newclass:
        dt_delayMaxcnt4 = _swig_property(_scopefunapi.SHardware2_dt_delayMaxcnt4_get, _scopefunapi.SHardware2_dt_delayMaxcnt4_set)
    __swig_setmethods__["dt_control"] = _scopefunapi.SHardware2_dt_control_set
    __swig_getmethods__["dt_control"] = _scopefunapi.SHardware2_dt_control_get
    if _newclass:
        dt_control = _swig_property(_scopefunapi.SHardware2_dt_control_get, _scopefunapi.SHardware2_dt_control_set)
    __swig_setmethods__["digitalVoltage"] = _scopefunapi.SHardware2_digitalVoltage_set
    __swig_getmethods__["digitalVoltage"] = _scopefunapi.SHardware2_digitalVoltage_get
    if _newclass:
        digitalVoltage = _swig_property(_scopefunapi.SHardware2_digitalVoltage_get, _scopefunapi.SHardware2_digitalVoltage_set)
    __swig_setmethods__["digitalInputOutput"] = _scopefunapi.SHardware2_digitalInputOutput_set
    __swig_getmethods__["digitalInputOutput"] = _scopefunapi.SHardware2_digitalInputOutput_get
    if _newclass:
        digitalInputOutput = _swig_property(_scopefunapi.SHardware2_digitalInputOutput_get, _scopefunapi.SHardware2_digitalInputOutput_set)
    __swig_setmethods__["digitalOutputBit"] = _scopefunapi.SHardware2_digitalOutputBit_set
    __swig_getmethods__["digitalOutputBit"] = _scopefunapi.SHardware2_digitalOutputBit_get
    if _newclass:
        digitalOutputBit = _swig_property(_scopefunapi.SHardware2_digitalOutputBit_get, _scopefunapi.SHardware2_digitalOutputBit_set)
    __swig_setmethods__["digitalOutputMask"] = _scopefunapi.SHardware2_digitalOutputMask_set
    __swig_getmethods__["digitalOutputMask"] = _scopefunapi.SHardware2_digitalOutputMask_get
    if _newclass:
        digitalOutputMask = _swig_property(_scopefunapi.SHardware2_digitalOutputMask_get, _scopefunapi.SHardware2_digitalOutputMask_set)
    __swig_setmethods__["digitalClkDivideH"] = _scopefunapi.SHardware2_digitalClkDivideH_set
    __swig_getmethods__["digitalClkDivideH"] = _scopefunapi.SHardware2_digitalClkDivideH_get
    if _newclass:
        digitalClkDivideH = _swig_property(_scopefunapi.SHardware2_digitalClkDivideH_get, _scopefunapi.SHardware2_digitalClkDivideH_set)
    __swig_setmethods__["digitalClkDivideL"] = _scopefunapi.SHardware2_digitalClkDivideL_set
    __swig_getmethods__["digitalClkDivideL"] = _scopefunapi.SHardware2_digitalClkDivideL_get
    if _newclass:
        digitalClkDivideL = _swig_property(_scopefunapi.SHardware2_digitalClkDivideL_get, _scopefunapi.SHardware2_digitalClkDivideL_set)
    __swig_setmethods__["average"] = _scopefunapi.SHardware2_average_set
    __swig_getmethods__["average"] = _scopefunapi.SHardware2_average_get
    if _newclass:
        average = _swig_property(_scopefunapi.SHardware2_average_get, _scopefunapi.SHardware2_average_set)
    __swig_setmethods__["reserved2"] = _scopefunapi.SHardware2_reserved2_set
    __swig_getmethods__["reserved2"] = _scopefunapi.SHardware2_reserved2_get
    if _newclass:
        reserved2 = _swig_property(_scopefunapi.SHardware2_reserved2_get, _scopefunapi.SHardware2_reserved2_set)
    __swig_setmethods__["reserved3"] = _scopefunapi.SHardware2_reserved3_set
    __swig_getmethods__["reserved3"] = _scopefunapi.SHardware2_reserved3_get
    if _newclass:
        reserved3 = _swig_property(_scopefunapi.SHardware2_reserved3_get, _scopefunapi.SHardware2_reserved3_set)
    __swig_setmethods__["reserved4"] = _scopefunapi.SHardware2_reserved4_set
    __swig_getmethods__["reserved4"] = _scopefunapi.SHardware2_reserved4_get
    if _newclass:
        reserved4 = _swig_property(_scopefunapi.SHardware2_reserved4_get, _scopefunapi.SHardware2_reserved4_set)
    __swig_setmethods__["reserved5"] = _scopefunapi.SHardware2_reserved5_set
    __swig_getmethods__["reserved5"] = _scopefunapi.SHardware2_reserved5_get
    if _newclass:
        reserved5 = _swig_property(_scopefunapi.SHardware2_reserved5_get, _scopefunapi.SHardware2_reserved5_set)
    __swig_setmethods__["reserved6"] = _scopefunapi.SHardware2_reserved6_set
    __swig_getmethods__["reserved6"] = _scopefunapi.SHardware2_reserved6_get
    if _newclass:
        reserved6 = _swig_property(_scopefunapi.SHardware2_reserved6_get, _scopefunapi.SHardware2_reserved6_set)

    def __init__(self):
        this = _scopefunapi.new_SHardware2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SHardware2
    __del__ = lambda self: None
SHardware2_swigregister = _scopefunapi.SHardware2_swigregister
SHardware2_swigregister(SHardware2)

class SArrayMagic1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayMagic1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayMagic1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayMagic1_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayMagic1_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayMagic1_bytes_get, _scopefunapi.SArrayMagic1_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayMagic1___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayMagic1___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayMagic1___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayMagic1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayMagic1
    __del__ = lambda self: None
SArrayMagic1_swigregister = _scopefunapi.SArrayMagic1_swigregister
SArrayMagic1_swigregister(SArrayMagic1)

class SArrayTrigger1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayTrigger1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayTrigger1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayTrigger1_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayTrigger1_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayTrigger1_bytes_get, _scopefunapi.SArrayTrigger1_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayTrigger1___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayTrigger1___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayTrigger1___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayTrigger1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayTrigger1
    __del__ = lambda self: None
SArrayTrigger1_swigregister = _scopefunapi.SArrayTrigger1_swigregister
SArrayTrigger1_swigregister(SArrayTrigger1)

class SArrayHardware1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayHardware1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayHardware1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayHardware1_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayHardware1_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayHardware1_bytes_get, _scopefunapi.SArrayHardware1_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayHardware1___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayHardware1___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayHardware1___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayHardware1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayHardware1
    __del__ = lambda self: None
SArrayHardware1_swigregister = _scopefunapi.SArrayHardware1_swigregister
SArrayHardware1_swigregister(SArrayHardware1)

class SArrayPadding1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayPadding1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayPadding1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayPadding1_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayPadding1_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayPadding1_bytes_get, _scopefunapi.SArrayPadding1_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayPadding1___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayPadding1___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayPadding1___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayPadding1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayPadding1
    __del__ = lambda self: None
SArrayPadding1_swigregister = _scopefunapi.SArrayPadding1_swigregister
SArrayPadding1_swigregister(SArrayPadding1)

class SArrayFrameSize1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayFrameSize1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayFrameSize1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayFrameSize1_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayFrameSize1_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayFrameSize1_bytes_get, _scopefunapi.SArrayFrameSize1_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayFrameSize1___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayFrameSize1___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayFrameSize1___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayFrameSize1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayFrameSize1
    __del__ = lambda self: None
SArrayFrameSize1_swigregister = _scopefunapi.SArrayFrameSize1_swigregister
SArrayFrameSize1_swigregister(SArrayFrameSize1)

class SArrayMagic2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayMagic2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayMagic2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayMagic2_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayMagic2_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayMagic2_bytes_get, _scopefunapi.SArrayMagic2_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayMagic2___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayMagic2___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayMagic2___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayMagic2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayMagic2
    __del__ = lambda self: None
SArrayMagic2_swigregister = _scopefunapi.SArrayMagic2_swigregister
SArrayMagic2_swigregister(SArrayMagic2)

class SArrayETS2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayETS2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayETS2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayETS2_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayETS2_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayETS2_bytes_get, _scopefunapi.SArrayETS2_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayETS2___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayETS2___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayETS2___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayETS2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayETS2
    __del__ = lambda self: None
SArrayETS2_swigregister = _scopefunapi.SArrayETS2_swigregister
SArrayETS2_swigregister(SArrayETS2)

class SArrayPaddingBefore2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayPaddingBefore2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayPaddingBefore2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayPaddingBefore2_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayPaddingBefore2_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayPaddingBefore2_bytes_get, _scopefunapi.SArrayPaddingBefore2_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayPaddingBefore2___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayPaddingBefore2___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayPaddingBefore2___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayPaddingBefore2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayPaddingBefore2
    __del__ = lambda self: None
SArrayPaddingBefore2_swigregister = _scopefunapi.SArrayPaddingBefore2_swigregister
SArrayPaddingBefore2_swigregister(SArrayPaddingBefore2)

class SArrayHardware2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayHardware2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayHardware2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayHardware2_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayHardware2_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayHardware2_bytes_get, _scopefunapi.SArrayHardware2_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayHardware2___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayHardware2___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayHardware2___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayHardware2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayHardware2
    __del__ = lambda self: None
SArrayHardware2_swigregister = _scopefunapi.SArrayHardware2_swigregister
SArrayHardware2_swigregister(SArrayHardware2)

class SArrayPaddingAfter2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayPaddingAfter2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayPaddingAfter2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayPaddingAfter2_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayPaddingAfter2_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayPaddingAfter2_bytes_get, _scopefunapi.SArrayPaddingAfter2_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayPaddingAfter2___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayPaddingAfter2___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayPaddingAfter2___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayPaddingAfter2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayPaddingAfter2
    __del__ = lambda self: None
SArrayPaddingAfter2_swigregister = _scopefunapi.SArrayPaddingAfter2_swigregister
SArrayPaddingAfter2_swigregister(SArrayPaddingAfter2)

class SArrayCrc2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayCrc2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayCrc2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayCrc2_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayCrc2_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayCrc2_bytes_get, _scopefunapi.SArrayCrc2_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayCrc2___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayCrc2___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayCrc2___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayCrc2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayCrc2
    __del__ = lambda self: None
SArrayCrc2_swigregister = _scopefunapi.SArrayCrc2_swigregister
SArrayCrc2_swigregister(SArrayCrc2)

class SFrameHeader1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFrameHeader1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFrameHeader1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magic"] = _scopefunapi.SFrameHeader1_magic_set
    __swig_getmethods__["magic"] = _scopefunapi.SFrameHeader1_magic_get
    if _newclass:
        magic = _swig_property(_scopefunapi.SFrameHeader1_magic_get, _scopefunapi.SFrameHeader1_magic_set)
    __swig_setmethods__["trigger"] = _scopefunapi.SFrameHeader1_trigger_set
    __swig_getmethods__["trigger"] = _scopefunapi.SFrameHeader1_trigger_get
    if _newclass:
        trigger = _swig_property(_scopefunapi.SFrameHeader1_trigger_get, _scopefunapi.SFrameHeader1_trigger_set)
    __swig_setmethods__["hardware"] = _scopefunapi.SFrameHeader1_hardware_set
    __swig_getmethods__["hardware"] = _scopefunapi.SFrameHeader1_hardware_get
    if _newclass:
        hardware = _swig_property(_scopefunapi.SFrameHeader1_hardware_get, _scopefunapi.SFrameHeader1_hardware_set)
    __swig_setmethods__["padding"] = _scopefunapi.SFrameHeader1_padding_set
    __swig_getmethods__["padding"] = _scopefunapi.SFrameHeader1_padding_get
    if _newclass:
        padding = _swig_property(_scopefunapi.SFrameHeader1_padding_get, _scopefunapi.SFrameHeader1_padding_set)
    __swig_setmethods__["frameSize"] = _scopefunapi.SFrameHeader1_frameSize_set
    __swig_getmethods__["frameSize"] = _scopefunapi.SFrameHeader1_frameSize_get
    if _newclass:
        frameSize = _swig_property(_scopefunapi.SFrameHeader1_frameSize_get, _scopefunapi.SFrameHeader1_frameSize_set)
    __swig_setmethods__["crc"] = _scopefunapi.SFrameHeader1_crc_set
    __swig_getmethods__["crc"] = _scopefunapi.SFrameHeader1_crc_get
    if _newclass:
        crc = _swig_property(_scopefunapi.SFrameHeader1_crc_get, _scopefunapi.SFrameHeader1_crc_set)

    def __init__(self):
        this = _scopefunapi.new_SFrameHeader1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SFrameHeader1
    __del__ = lambda self: None
SFrameHeader1_swigregister = _scopefunapi.SFrameHeader1_swigregister
SFrameHeader1_swigregister(SFrameHeader1)

class SFrameHeader2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFrameHeader2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFrameHeader2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magic"] = _scopefunapi.SFrameHeader2_magic_set
    __swig_getmethods__["magic"] = _scopefunapi.SFrameHeader2_magic_get
    if _newclass:
        magic = _swig_property(_scopefunapi.SFrameHeader2_magic_get, _scopefunapi.SFrameHeader2_magic_set)
    __swig_setmethods__["etsDelay"] = _scopefunapi.SFrameHeader2_etsDelay_set
    __swig_getmethods__["etsDelay"] = _scopefunapi.SFrameHeader2_etsDelay_get
    if _newclass:
        etsDelay = _swig_property(_scopefunapi.SFrameHeader2_etsDelay_get, _scopefunapi.SFrameHeader2_etsDelay_set)
    __swig_setmethods__["paddBefore"] = _scopefunapi.SFrameHeader2_paddBefore_set
    __swig_getmethods__["paddBefore"] = _scopefunapi.SFrameHeader2_paddBefore_get
    if _newclass:
        paddBefore = _swig_property(_scopefunapi.SFrameHeader2_paddBefore_get, _scopefunapi.SFrameHeader2_paddBefore_set)
    __swig_setmethods__["hardware"] = _scopefunapi.SFrameHeader2_hardware_set
    __swig_getmethods__["hardware"] = _scopefunapi.SFrameHeader2_hardware_get
    if _newclass:
        hardware = _swig_property(_scopefunapi.SFrameHeader2_hardware_get, _scopefunapi.SFrameHeader2_hardware_set)
    __swig_setmethods__["paddAfter"] = _scopefunapi.SFrameHeader2_paddAfter_set
    __swig_getmethods__["paddAfter"] = _scopefunapi.SFrameHeader2_paddAfter_get
    if _newclass:
        paddAfter = _swig_property(_scopefunapi.SFrameHeader2_paddAfter_get, _scopefunapi.SFrameHeader2_paddAfter_set)
    __swig_setmethods__["crc"] = _scopefunapi.SFrameHeader2_crc_set
    __swig_getmethods__["crc"] = _scopefunapi.SFrameHeader2_crc_get
    if _newclass:
        crc = _swig_property(_scopefunapi.SFrameHeader2_crc_get, _scopefunapi.SFrameHeader2_crc_set)

    def __init__(self):
        this = _scopefunapi.new_SFrameHeader2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SFrameHeader2
    __del__ = lambda self: None
SFrameHeader2_swigregister = _scopefunapi.SFrameHeader2_swigregister
SFrameHeader2_swigregister(SFrameHeader2)

class SArrayFrameData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayFrameData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayFrameData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayFrameData_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayFrameData_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayFrameData_bytes_get, _scopefunapi.SArrayFrameData_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayFrameData___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayFrameData___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayFrameData___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayFrameData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayFrameData
    __del__ = lambda self: None
SArrayFrameData_swigregister = _scopefunapi.SArrayFrameData_swigregister
SArrayFrameData_swigregister(SArrayFrameData)

class SFrameData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFrameData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFrameData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _scopefunapi.SFrameData_data_set
    __swig_getmethods__["data"] = _scopefunapi.SFrameData_data_get
    if _newclass:
        data = _swig_property(_scopefunapi.SFrameData_data_get, _scopefunapi.SFrameData_data_set)

    def __init__(self):
        this = _scopefunapi.new_SFrameData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SFrameData
    __del__ = lambda self: None
SFrameData_swigregister = _scopefunapi.SFrameData_swigregister
SFrameData_swigregister(SFrameData)

class SArrayEEPROM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayEEPROM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayEEPROM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayEEPROM_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayEEPROM_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayEEPROM_bytes_get, _scopefunapi.SArrayEEPROM_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayEEPROM___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayEEPROM___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayEEPROM___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayEEPROM()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayEEPROM
    __del__ = lambda self: None
SArrayEEPROM_swigregister = _scopefunapi.SArrayEEPROM_swigregister
SArrayEEPROM_swigregister(SArrayEEPROM)

class SEeprom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEeprom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SEeprom, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _scopefunapi.SEeprom_data_set
    __swig_getmethods__["data"] = _scopefunapi.SEeprom_data_get
    if _newclass:
        data = _swig_property(_scopefunapi.SEeprom_data_get, _scopefunapi.SEeprom_data_set)

    def __init__(self):
        this = _scopefunapi.new_SEeprom()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SEeprom
    __del__ = lambda self: None
SEeprom_swigregister = _scopefunapi.SEeprom_swigregister
SEeprom_swigregister(SEeprom)

class SGUID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGUID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGUID, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data1"] = _scopefunapi.SGUID_data1_set
    __swig_getmethods__["data1"] = _scopefunapi.SGUID_data1_get
    if _newclass:
        data1 = _swig_property(_scopefunapi.SGUID_data1_get, _scopefunapi.SGUID_data1_set)
    __swig_setmethods__["data2"] = _scopefunapi.SGUID_data2_set
    __swig_getmethods__["data2"] = _scopefunapi.SGUID_data2_get
    if _newclass:
        data2 = _swig_property(_scopefunapi.SGUID_data2_get, _scopefunapi.SGUID_data2_set)
    __swig_setmethods__["data3"] = _scopefunapi.SGUID_data3_set
    __swig_getmethods__["data3"] = _scopefunapi.SGUID_data3_get
    if _newclass:
        data3 = _swig_property(_scopefunapi.SGUID_data3_get, _scopefunapi.SGUID_data3_set)
    __swig_setmethods__["data4"] = _scopefunapi.SGUID_data4_set
    __swig_getmethods__["data4"] = _scopefunapi.SGUID_data4_get
    if _newclass:
        data4 = _swig_property(_scopefunapi.SGUID_data4_get, _scopefunapi.SGUID_data4_set)

    def __init__(self):
        this = _scopefunapi.new_SGUID()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SGUID
    __del__ = lambda self: None
SGUID_swigregister = _scopefunapi.SGUID_swigregister
SGUID_swigregister(SGUID)

class SArrayFx2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayFx2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayFx2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayFx2_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayFx2_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayFx2_bytes_get, _scopefunapi.SArrayFx2_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayFx2___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayFx2___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayFx2___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayFx2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayFx2
    __del__ = lambda self: None
SArrayFx2_swigregister = _scopefunapi.SArrayFx2_swigregister
SArrayFx2_swigregister(SArrayFx2)

class SFx2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFx2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFx2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _scopefunapi.SFx2_size_set
    __swig_getmethods__["size"] = _scopefunapi.SFx2_size_get
    if _newclass:
        size = _swig_property(_scopefunapi.SFx2_size_get, _scopefunapi.SFx2_size_set)
    __swig_setmethods__["data"] = _scopefunapi.SFx2_data_set
    __swig_getmethods__["data"] = _scopefunapi.SFx2_data_get
    if _newclass:
        data = _swig_property(_scopefunapi.SFx2_data_get, _scopefunapi.SFx2_data_set)

    def __init__(self):
        this = _scopefunapi.new_SFx2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SFx2
    __del__ = lambda self: None
SFx2_swigregister = _scopefunapi.SFx2_swigregister
SFx2_swigregister(SFx2)

class SArrayFpga(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayFpga, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayFpga, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayFpga_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayFpga_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayFpga_bytes_get, _scopefunapi.SArrayFpga_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayFpga___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayFpga___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayFpga___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayFpga()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayFpga
    __del__ = lambda self: None
SArrayFpga_swigregister = _scopefunapi.SArrayFpga_swigregister
SArrayFpga_swigregister(SArrayFpga)

class SFpga(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFpga, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFpga, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _scopefunapi.SFpga_size_set
    __swig_getmethods__["size"] = _scopefunapi.SFpga_size_get
    if _newclass:
        size = _swig_property(_scopefunapi.SFpga_size_get, _scopefunapi.SFpga_size_set)
    __swig_setmethods__["data"] = _scopefunapi.SFpga_data_set
    __swig_getmethods__["data"] = _scopefunapi.SFpga_data_get
    if _newclass:
        data = _swig_property(_scopefunapi.SFpga_data_get, _scopefunapi.SFpga_data_set)

    def __init__(self):
        this = _scopefunapi.new_SFpga()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SFpga
    __del__ = lambda self: None
SFpga_swigregister = _scopefunapi.SFpga_swigregister
SFpga_swigregister(SFpga)

class SArrayGeneratorAnalog0(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayGeneratorAnalog0, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayGeneratorAnalog0, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayGeneratorAnalog0_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayGeneratorAnalog0_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayGeneratorAnalog0_bytes_get, _scopefunapi.SArrayGeneratorAnalog0_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayGeneratorAnalog0___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayGeneratorAnalog0___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayGeneratorAnalog0___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayGeneratorAnalog0()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayGeneratorAnalog0
    __del__ = lambda self: None
SArrayGeneratorAnalog0_swigregister = _scopefunapi.SArrayGeneratorAnalog0_swigregister
SArrayGeneratorAnalog0_swigregister(SArrayGeneratorAnalog0)

class SArrayGeneratorAnalog1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayGeneratorAnalog1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayGeneratorAnalog1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayGeneratorAnalog1_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayGeneratorAnalog1_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayGeneratorAnalog1_bytes_get, _scopefunapi.SArrayGeneratorAnalog1_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayGeneratorAnalog1___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayGeneratorAnalog1___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayGeneratorAnalog1___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayGeneratorAnalog1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayGeneratorAnalog1
    __del__ = lambda self: None
SArrayGeneratorAnalog1_swigregister = _scopefunapi.SArrayGeneratorAnalog1_swigregister
SArrayGeneratorAnalog1_swigregister(SArrayGeneratorAnalog1)

class SArrayGeneratorDigital(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayGeneratorDigital, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayGeneratorDigital, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayGeneratorDigital_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayGeneratorDigital_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayGeneratorDigital_bytes_get, _scopefunapi.SArrayGeneratorDigital_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayGeneratorDigital___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayGeneratorDigital___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayGeneratorDigital___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayGeneratorDigital()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayGeneratorDigital
    __del__ = lambda self: None
SArrayGeneratorDigital_swigregister = _scopefunapi.SArrayGeneratorDigital_swigregister
SArrayGeneratorDigital_swigregister(SArrayGeneratorDigital)

class SGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGenerator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["analog0"] = _scopefunapi.SGenerator_analog0_set
    __swig_getmethods__["analog0"] = _scopefunapi.SGenerator_analog0_get
    if _newclass:
        analog0 = _swig_property(_scopefunapi.SGenerator_analog0_get, _scopefunapi.SGenerator_analog0_set)
    __swig_setmethods__["analog1"] = _scopefunapi.SGenerator_analog1_set
    __swig_getmethods__["analog1"] = _scopefunapi.SGenerator_analog1_get
    if _newclass:
        analog1 = _swig_property(_scopefunapi.SGenerator_analog1_get, _scopefunapi.SGenerator_analog1_set)
    __swig_setmethods__["digital"] = _scopefunapi.SGenerator_digital_set
    __swig_getmethods__["digital"] = _scopefunapi.SGenerator_digital_get
    if _newclass:
        digital = _swig_property(_scopefunapi.SGenerator_digital_get, _scopefunapi.SGenerator_digital_set)

    def __init__(self):
        this = _scopefunapi.new_SGenerator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SGenerator
    __del__ = lambda self: None
SGenerator_swigregister = _scopefunapi.SGenerator_swigregister
SGenerator_swigregister(SGenerator)

stSin = _scopefunapi.stSin
stCos = _scopefunapi.stCos
stInc = _scopefunapi.stInc
stDec = _scopefunapi.stDec
stConstant = _scopefunapi.stConstant
stRandom = _scopefunapi.stRandom
stSquare = _scopefunapi.stSquare
stDelta = _scopefunapi.stDelta
mIdle = _scopefunapi.mIdle
mCapture = _scopefunapi.mCapture
mSimulate = _scopefunapi.mSimulate
class SSimulate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSimulate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SSimulate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["active0"] = _scopefunapi.SSimulate_active0_set
    __swig_getmethods__["active0"] = _scopefunapi.SSimulate_active0_get
    if _newclass:
        active0 = _swig_property(_scopefunapi.SSimulate_active0_get, _scopefunapi.SSimulate_active0_set)
    __swig_setmethods__["active1"] = _scopefunapi.SSimulate_active1_set
    __swig_getmethods__["active1"] = _scopefunapi.SSimulate_active1_get
    if _newclass:
        active1 = _swig_property(_scopefunapi.SSimulate_active1_get, _scopefunapi.SSimulate_active1_set)
    __swig_setmethods__["type0"] = _scopefunapi.SSimulate_type0_set
    __swig_getmethods__["type0"] = _scopefunapi.SSimulate_type0_get
    if _newclass:
        type0 = _swig_property(_scopefunapi.SSimulate_type0_get, _scopefunapi.SSimulate_type0_set)
    __swig_setmethods__["type1"] = _scopefunapi.SSimulate_type1_set
    __swig_getmethods__["type1"] = _scopefunapi.SSimulate_type1_get
    if _newclass:
        type1 = _swig_property(_scopefunapi.SSimulate_type1_get, _scopefunapi.SSimulate_type1_set)
    __swig_setmethods__["period0"] = _scopefunapi.SSimulate_period0_set
    __swig_getmethods__["period0"] = _scopefunapi.SSimulate_period0_get
    if _newclass:
        period0 = _swig_property(_scopefunapi.SSimulate_period0_get, _scopefunapi.SSimulate_period0_set)
    __swig_setmethods__["period1"] = _scopefunapi.SSimulate_period1_set
    __swig_getmethods__["period1"] = _scopefunapi.SSimulate_period1_get
    if _newclass:
        period1 = _swig_property(_scopefunapi.SSimulate_period1_get, _scopefunapi.SSimulate_period1_set)
    __swig_setmethods__["peakToPeak0"] = _scopefunapi.SSimulate_peakToPeak0_set
    __swig_getmethods__["peakToPeak0"] = _scopefunapi.SSimulate_peakToPeak0_get
    if _newclass:
        peakToPeak0 = _swig_property(_scopefunapi.SSimulate_peakToPeak0_get, _scopefunapi.SSimulate_peakToPeak0_set)
    __swig_setmethods__["peakToPeak1"] = _scopefunapi.SSimulate_peakToPeak1_set
    __swig_getmethods__["peakToPeak1"] = _scopefunapi.SSimulate_peakToPeak1_get
    if _newclass:
        peakToPeak1 = _swig_property(_scopefunapi.SSimulate_peakToPeak1_get, _scopefunapi.SSimulate_peakToPeak1_set)
    __swig_setmethods__["avery0"] = _scopefunapi.SSimulate_avery0_set
    __swig_getmethods__["avery0"] = _scopefunapi.SSimulate_avery0_get
    if _newclass:
        avery0 = _swig_property(_scopefunapi.SSimulate_avery0_get, _scopefunapi.SSimulate_avery0_set)
    __swig_setmethods__["avery1"] = _scopefunapi.SSimulate_avery1_set
    __swig_getmethods__["avery1"] = _scopefunapi.SSimulate_avery1_get
    if _newclass:
        avery1 = _swig_property(_scopefunapi.SSimulate_avery1_get, _scopefunapi.SSimulate_avery1_set)
    __swig_setmethods__["speed0"] = _scopefunapi.SSimulate_speed0_set
    __swig_getmethods__["speed0"] = _scopefunapi.SSimulate_speed0_get
    if _newclass:
        speed0 = _swig_property(_scopefunapi.SSimulate_speed0_get, _scopefunapi.SSimulate_speed0_set)
    __swig_setmethods__["speed1"] = _scopefunapi.SSimulate_speed1_set
    __swig_getmethods__["speed1"] = _scopefunapi.SSimulate_speed1_get
    if _newclass:
        speed1 = _swig_property(_scopefunapi.SSimulate_speed1_get, _scopefunapi.SSimulate_speed1_set)
    __swig_setmethods__["etsIndex"] = _scopefunapi.SSimulate_etsIndex_set
    __swig_getmethods__["etsIndex"] = _scopefunapi.SSimulate_etsIndex_get
    if _newclass:
        etsIndex = _swig_property(_scopefunapi.SSimulate_etsIndex_get, _scopefunapi.SSimulate_etsIndex_set)
    __swig_setmethods__["etsActive"] = _scopefunapi.SSimulate_etsActive_set
    __swig_getmethods__["etsActive"] = _scopefunapi.SSimulate_etsActive_get
    if _newclass:
        etsActive = _swig_property(_scopefunapi.SSimulate_etsActive_get, _scopefunapi.SSimulate_etsActive_set)
    __swig_setmethods__["etsMax"] = _scopefunapi.SSimulate_etsMax_set
    __swig_getmethods__["etsMax"] = _scopefunapi.SSimulate_etsMax_get
    if _newclass:
        etsMax = _swig_property(_scopefunapi.SSimulate_etsMax_get, _scopefunapi.SSimulate_etsMax_set)
    __swig_setmethods__["time"] = _scopefunapi.SSimulate_time_set
    __swig_getmethods__["time"] = _scopefunapi.SSimulate_time_get
    if _newclass:
        time = _swig_property(_scopefunapi.SSimulate_time_get, _scopefunapi.SSimulate_time_set)
    __swig_setmethods__["voltage0"] = _scopefunapi.SSimulate_voltage0_set
    __swig_getmethods__["voltage0"] = _scopefunapi.SSimulate_voltage0_get
    if _newclass:
        voltage0 = _swig_property(_scopefunapi.SSimulate_voltage0_get, _scopefunapi.SSimulate_voltage0_set)
    __swig_setmethods__["voltage1"] = _scopefunapi.SSimulate_voltage1_set
    __swig_getmethods__["voltage1"] = _scopefunapi.SSimulate_voltage1_get
    if _newclass:
        voltage1 = _swig_property(_scopefunapi.SSimulate_voltage1_get, _scopefunapi.SSimulate_voltage1_set)

    def __init__(self):
        this = _scopefunapi.new_SSimulate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SSimulate
    __del__ = lambda self: None
SSimulate_swigregister = _scopefunapi.SSimulate_swigregister
SSimulate_swigregister(SSimulate)

class SUsbGuid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SUsbGuid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SUsbGuid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data1"] = _scopefunapi.SUsbGuid_data1_set
    __swig_getmethods__["data1"] = _scopefunapi.SUsbGuid_data1_get
    if _newclass:
        data1 = _swig_property(_scopefunapi.SUsbGuid_data1_get, _scopefunapi.SUsbGuid_data1_set)
    __swig_setmethods__["data2"] = _scopefunapi.SUsbGuid_data2_set
    __swig_getmethods__["data2"] = _scopefunapi.SUsbGuid_data2_get
    if _newclass:
        data2 = _swig_property(_scopefunapi.SUsbGuid_data2_get, _scopefunapi.SUsbGuid_data2_set)
    __swig_setmethods__["data3"] = _scopefunapi.SUsbGuid_data3_set
    __swig_getmethods__["data3"] = _scopefunapi.SUsbGuid_data3_get
    if _newclass:
        data3 = _swig_property(_scopefunapi.SUsbGuid_data3_get, _scopefunapi.SUsbGuid_data3_set)
    __swig_setmethods__["data4"] = _scopefunapi.SUsbGuid_data4_set
    __swig_getmethods__["data4"] = _scopefunapi.SUsbGuid_data4_get
    if _newclass:
        data4 = _swig_property(_scopefunapi.SUsbGuid_data4_get, _scopefunapi.SUsbGuid_data4_set)

    def __init__(self):
        this = _scopefunapi.new_SUsbGuid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SUsbGuid
    __del__ = lambda self: None
SUsbGuid_swigregister = _scopefunapi.SUsbGuid_swigregister
SUsbGuid_swigregister(SUsbGuid)

class SUsb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SUsb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SUsb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["idVendor"] = _scopefunapi.SUsb_idVendor_set
    __swig_getmethods__["idVendor"] = _scopefunapi.SUsb_idVendor_get
    if _newclass:
        idVendor = _swig_property(_scopefunapi.SUsb_idVendor_get, _scopefunapi.SUsb_idVendor_set)
    __swig_setmethods__["idProduct"] = _scopefunapi.SUsb_idProduct_set
    __swig_getmethods__["idProduct"] = _scopefunapi.SUsb_idProduct_get
    if _newclass:
        idProduct = _swig_property(_scopefunapi.SUsb_idProduct_get, _scopefunapi.SUsb_idProduct_set)
    __swig_setmethods__["idSerial"] = _scopefunapi.SUsb_idSerial_set
    __swig_getmethods__["idSerial"] = _scopefunapi.SUsb_idSerial_get
    if _newclass:
        idSerial = _swig_property(_scopefunapi.SUsb_idSerial_get, _scopefunapi.SUsb_idSerial_set)
    __swig_setmethods__["timeoutEp2"] = _scopefunapi.SUsb_timeoutEp2_set
    __swig_getmethods__["timeoutEp2"] = _scopefunapi.SUsb_timeoutEp2_get
    if _newclass:
        timeoutEp2 = _swig_property(_scopefunapi.SUsb_timeoutEp2_get, _scopefunapi.SUsb_timeoutEp2_set)
    __swig_setmethods__["timeoutEp4"] = _scopefunapi.SUsb_timeoutEp4_set
    __swig_getmethods__["timeoutEp4"] = _scopefunapi.SUsb_timeoutEp4_get
    if _newclass:
        timeoutEp4 = _swig_property(_scopefunapi.SUsb_timeoutEp4_get, _scopefunapi.SUsb_timeoutEp4_set)
    __swig_setmethods__["timeoutEp6"] = _scopefunapi.SUsb_timeoutEp6_set
    __swig_getmethods__["timeoutEp6"] = _scopefunapi.SUsb_timeoutEp6_get
    if _newclass:
        timeoutEp6 = _swig_property(_scopefunapi.SUsb_timeoutEp6_get, _scopefunapi.SUsb_timeoutEp6_set)
    __swig_setmethods__["xferSize"] = _scopefunapi.SUsb_xferSize_set
    __swig_getmethods__["xferSize"] = _scopefunapi.SUsb_xferSize_get
    if _newclass:
        xferSize = _swig_property(_scopefunapi.SUsb_xferSize_get, _scopefunapi.SUsb_xferSize_set)
    __swig_setmethods__["guid"] = _scopefunapi.SUsb_guid_set
    __swig_getmethods__["guid"] = _scopefunapi.SUsb_guid_get
    if _newclass:
        guid = _swig_property(_scopefunapi.SUsb_guid_get, _scopefunapi.SUsb_guid_set)

    def __init__(self):
        this = _scopefunapi.new_SUsb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SUsb
    __del__ = lambda self: None
SUsb_swigregister = _scopefunapi.SUsb_swigregister
SUsb_swigregister(SUsb)

class SArrayDisplayAnalog0(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayDisplayAnalog0, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayDisplayAnalog0, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayDisplayAnalog0_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayDisplayAnalog0_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayDisplayAnalog0_bytes_get, _scopefunapi.SArrayDisplayAnalog0_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayDisplayAnalog0___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayDisplayAnalog0___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayDisplayAnalog0___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayDisplayAnalog0()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayDisplayAnalog0
    __del__ = lambda self: None
SArrayDisplayAnalog0_swigregister = _scopefunapi.SArrayDisplayAnalog0_swigregister
SArrayDisplayAnalog0_swigregister(SArrayDisplayAnalog0)

class SArrayDisplayAnalog1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayDisplayAnalog1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayDisplayAnalog1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayDisplayAnalog1_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayDisplayAnalog1_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayDisplayAnalog1_bytes_get, _scopefunapi.SArrayDisplayAnalog1_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayDisplayAnalog1___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayDisplayAnalog1___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayDisplayAnalog1___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayDisplayAnalog1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayDisplayAnalog1
    __del__ = lambda self: None
SArrayDisplayAnalog1_swigregister = _scopefunapi.SArrayDisplayAnalog1_swigregister
SArrayDisplayAnalog1_swigregister(SArrayDisplayAnalog1)

class SArrayDisplayAnalogF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayDisplayAnalogF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayDisplayAnalogF, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayDisplayAnalogF_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayDisplayAnalogF_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayDisplayAnalogF_bytes_get, _scopefunapi.SArrayDisplayAnalogF_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayDisplayAnalogF___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayDisplayAnalogF___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayDisplayAnalogF___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayDisplayAnalogF()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayDisplayAnalogF
    __del__ = lambda self: None
SArrayDisplayAnalogF_swigregister = _scopefunapi.SArrayDisplayAnalogF_swigregister
SArrayDisplayAnalogF_swigregister(SArrayDisplayAnalogF)

class SArrayDisplayDigital(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArrayDisplayDigital, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArrayDisplayDigital, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArrayDisplayDigital_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArrayDisplayDigital_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArrayDisplayDigital_bytes_get, _scopefunapi.SArrayDisplayDigital_bytes_set)

    def __len__(self):
        return _scopefunapi.SArrayDisplayDigital___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArrayDisplayDigital___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArrayDisplayDigital___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArrayDisplayDigital()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArrayDisplayDigital
    __del__ = lambda self: None
SArrayDisplayDigital_swigregister = _scopefunapi.SArrayDisplayDigital_swigregister
SArrayDisplayDigital_swigregister(SArrayDisplayDigital)

class SDisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDisplay, name)
    __repr__ = _swig_repr
    __swig_setmethods__["analog0"] = _scopefunapi.SDisplay_analog0_set
    __swig_getmethods__["analog0"] = _scopefunapi.SDisplay_analog0_get
    if _newclass:
        analog0 = _swig_property(_scopefunapi.SDisplay_analog0_get, _scopefunapi.SDisplay_analog0_set)
    __swig_setmethods__["analog1"] = _scopefunapi.SDisplay_analog1_set
    __swig_getmethods__["analog1"] = _scopefunapi.SDisplay_analog1_get
    if _newclass:
        analog1 = _swig_property(_scopefunapi.SDisplay_analog1_get, _scopefunapi.SDisplay_analog1_set)
    __swig_setmethods__["analogF"] = _scopefunapi.SDisplay_analogF_set
    __swig_getmethods__["analogF"] = _scopefunapi.SDisplay_analogF_get
    if _newclass:
        analogF = _swig_property(_scopefunapi.SDisplay_analogF_get, _scopefunapi.SDisplay_analogF_set)
    __swig_setmethods__["digital"] = _scopefunapi.SDisplay_digital_set
    __swig_getmethods__["digital"] = _scopefunapi.SDisplay_digital_get
    if _newclass:
        digital = _swig_property(_scopefunapi.SDisplay_digital_get, _scopefunapi.SDisplay_digital_set)
    __swig_setmethods__["ch0"] = _scopefunapi.SDisplay_ch0_set
    __swig_getmethods__["ch0"] = _scopefunapi.SDisplay_ch0_get
    if _newclass:
        ch0 = _swig_property(_scopefunapi.SDisplay_ch0_get, _scopefunapi.SDisplay_ch0_set)
    __swig_setmethods__["ch1"] = _scopefunapi.SDisplay_ch1_set
    __swig_getmethods__["ch1"] = _scopefunapi.SDisplay_ch1_get
    if _newclass:
        ch1 = _swig_property(_scopefunapi.SDisplay_ch1_get, _scopefunapi.SDisplay_ch1_set)
    __swig_setmethods__["fun"] = _scopefunapi.SDisplay_fun_set
    __swig_getmethods__["fun"] = _scopefunapi.SDisplay_fun_get
    if _newclass:
        fun = _swig_property(_scopefunapi.SDisplay_fun_get, _scopefunapi.SDisplay_fun_set)
    __swig_setmethods__["dig"] = _scopefunapi.SDisplay_dig_set
    __swig_getmethods__["dig"] = _scopefunapi.SDisplay_dig_get
    if _newclass:
        dig = _swig_property(_scopefunapi.SDisplay_dig_get, _scopefunapi.SDisplay_dig_set)

    def __init__(self):
        this = _scopefunapi.new_SDisplay()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SDisplay
    __del__ = lambda self: None
SDisplay_swigregister = _scopefunapi.SDisplay_swigregister
SDisplay_swigregister(SDisplay)

uChannel0 = _scopefunapi.uChannel0
uChannel1 = _scopefunapi.uChannel1
uDigital = _scopefunapi.uDigital
uFunction = _scopefunapi.uFunction
amUSB = _scopefunapi.amUSB
amNetwork = _scopefunapi.amNetwork
class SArraySClientId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SArraySClientId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SArraySClientId, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _scopefunapi.SArraySClientId_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.SArraySClientId_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.SArraySClientId_bytes_get, _scopefunapi.SArraySClientId_bytes_set)

    def __len__(self):
        return _scopefunapi.SArraySClientId___len__(self)

    def __getitem__(self, i):
        return _scopefunapi.SArraySClientId___getitem__(self, i)

    def __setitem__(self, i, v):
        return _scopefunapi.SArraySClientId___setitem__(self, i, v)

    def __init__(self):
        this = _scopefunapi.new_SArraySClientId()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SArraySClientId
    __del__ = lambda self: None
SArraySClientId_swigregister = _scopefunapi.SArraySClientId_swigregister
SArraySClientId_swigregister(SArraySClientId)

class SActiveClients(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SActiveClients, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SActiveClients, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cnt"] = _scopefunapi.SActiveClients_cnt_set
    __swig_getmethods__["cnt"] = _scopefunapi.SActiveClients_cnt_get
    if _newclass:
        cnt = _swig_property(_scopefunapi.SActiveClients_cnt_get, _scopefunapi.SActiveClients_cnt_set)
    __swig_setmethods__["client"] = _scopefunapi.SActiveClients_client_set
    __swig_getmethods__["client"] = _scopefunapi.SActiveClients_client_get
    if _newclass:
        client = _swig_property(_scopefunapi.SActiveClients_client_get, _scopefunapi.SActiveClients_client_set)

    def __init__(self):
        this = _scopefunapi.new_SActiveClients()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SActiveClients
    __del__ = lambda self: None
SActiveClients_swigregister = _scopefunapi.SActiveClients_swigregister
SActiveClients_swigregister(SActiveClients)

cmOff = _scopefunapi.cmOff
cmAllFrames = _scopefunapi.cmAllFrames
cmRequest = _scopefunapi.cmRequest
class SFrameInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFrameInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFrameInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _scopefunapi.SFrameInfo_version_set
    __swig_getmethods__["version"] = _scopefunapi.SFrameInfo_version_get
    if _newclass:
        version = _swig_property(_scopefunapi.SFrameInfo_version_get, _scopefunapi.SFrameInfo_version_set)
    __swig_setmethods__["header"] = _scopefunapi.SFrameInfo_header_set
    __swig_getmethods__["header"] = _scopefunapi.SFrameInfo_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.SFrameInfo_header_get, _scopefunapi.SFrameInfo_header_set)
    __swig_setmethods__["data"] = _scopefunapi.SFrameInfo_data_set
    __swig_getmethods__["data"] = _scopefunapi.SFrameInfo_data_get
    if _newclass:
        data = _swig_property(_scopefunapi.SFrameInfo_data_get, _scopefunapi.SFrameInfo_data_set)
    __swig_setmethods__["packet"] = _scopefunapi.SFrameInfo_packet_set
    __swig_getmethods__["packet"] = _scopefunapi.SFrameInfo_packet_get
    if _newclass:
        packet = _swig_property(_scopefunapi.SFrameInfo_packet_get, _scopefunapi.SFrameInfo_packet_set)

    def __init__(self):
        this = _scopefunapi.new_SFrameInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SFrameInfo
    __del__ = lambda self: None
SFrameInfo_swigregister = _scopefunapi.SFrameInfo_swigregister
SFrameInfo_swigregister(SFrameInfo)

mClientConnect = _scopefunapi.mClientConnect
mClientDisconnect = _scopefunapi.mClientDisconnect
mClientDisplay = _scopefunapi.mClientDisplay
mUpload = _scopefunapi.mUpload
mDownload = _scopefunapi.mDownload
mHardwareOpen = _scopefunapi.mHardwareOpen
mHardwareIsOpened = _scopefunapi.mHardwareIsOpened
mHardwareReset = _scopefunapi.mHardwareReset
mHardwareConfig1 = _scopefunapi.mHardwareConfig1
mHardwareConfig2 = _scopefunapi.mHardwareConfig2
mHardwareCapture = _scopefunapi.mHardwareCapture
mHardwareCaptureFrame = _scopefunapi.mHardwareCaptureFrame
mHardwareUploadFx2 = _scopefunapi.mHardwareUploadFx2
mHardwareUploadFpga = _scopefunapi.mHardwareUploadFpga
mHardwareUploadGenerator = _scopefunapi.mHardwareUploadGenerator
mHardwareEepromRead = _scopefunapi.mHardwareEepromRead
mHardwareEepromReadFirmwareID = _scopefunapi.mHardwareEepromReadFirmwareID
mHardwareEepromWrite = _scopefunapi.mHardwareEepromWrite
mHardwareEepromErase = _scopefunapi.mHardwareEepromErase
mHardwareClose = _scopefunapi.mHardwareClose
mLast = _scopefunapi.mLast
class messageHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, messageHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, messageHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magic"] = _scopefunapi.messageHeader_magic_set
    __swig_getmethods__["magic"] = _scopefunapi.messageHeader_magic_get
    if _newclass:
        magic = _swig_property(_scopefunapi.messageHeader_magic_get, _scopefunapi.messageHeader_magic_set)
    __swig_setmethods__["size"] = _scopefunapi.messageHeader_size_set
    __swig_getmethods__["size"] = _scopefunapi.messageHeader_size_get
    if _newclass:
        size = _swig_property(_scopefunapi.messageHeader_size_get, _scopefunapi.messageHeader_size_set)
    __swig_setmethods__["message"] = _scopefunapi.messageHeader_message_set
    __swig_getmethods__["message"] = _scopefunapi.messageHeader_message_get
    if _newclass:
        message = _swig_property(_scopefunapi.messageHeader_message_get, _scopefunapi.messageHeader_message_set)
    __swig_setmethods__["error"] = _scopefunapi.messageHeader_error_set
    __swig_getmethods__["error"] = _scopefunapi.messageHeader_error_get
    if _newclass:
        error = _swig_property(_scopefunapi.messageHeader_error_get, _scopefunapi.messageHeader_error_set)

    def __init__(self):
        this = _scopefunapi.new_messageHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_messageHeader
    __del__ = lambda self: None
messageHeader_swigregister = _scopefunapi.messageHeader_swigregister
messageHeader_swigregister(messageHeader)

class csClientConnect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csClientConnect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csClientConnect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csClientConnect_header_set
    __swig_getmethods__["header"] = _scopefunapi.csClientConnect_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csClientConnect_header_get, _scopefunapi.csClientConnect_header_set)
    __swig_setmethods__["maxMemory"] = _scopefunapi.csClientConnect_maxMemory_set
    __swig_getmethods__["maxMemory"] = _scopefunapi.csClientConnect_maxMemory_get
    if _newclass:
        maxMemory = _swig_property(_scopefunapi.csClientConnect_maxMemory_get, _scopefunapi.csClientConnect_maxMemory_set)

    def __init__(self):
        this = _scopefunapi.new_csClientConnect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csClientConnect
    __del__ = lambda self: None
csClientConnect_swigregister = _scopefunapi.csClientConnect_swigregister
csClientConnect_swigregister(csClientConnect)

class csClientDisconnect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csClientDisconnect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csClientDisconnect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csClientDisconnect_header_set
    __swig_getmethods__["header"] = _scopefunapi.csClientDisconnect_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csClientDisconnect_header_get, _scopefunapi.csClientDisconnect_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.csClientDisconnect_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.csClientDisconnect_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.csClientDisconnect_reserved_get, _scopefunapi.csClientDisconnect_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_csClientDisconnect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csClientDisconnect
    __del__ = lambda self: None
csClientDisconnect_swigregister = _scopefunapi.csClientDisconnect_swigregister
csClientDisconnect_swigregister(csClientDisconnect)

class csClientDisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csClientDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csClientDisplay, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csClientDisplay_header_set
    __swig_getmethods__["header"] = _scopefunapi.csClientDisplay_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csClientDisplay_header_get, _scopefunapi.csClientDisplay_header_set)
    __swig_setmethods__["display"] = _scopefunapi.csClientDisplay_display_set
    __swig_getmethods__["display"] = _scopefunapi.csClientDisplay_display_get
    if _newclass:
        display = _swig_property(_scopefunapi.csClientDisplay_display_get, _scopefunapi.csClientDisplay_display_set)
    __swig_setmethods__["clientId"] = _scopefunapi.csClientDisplay_clientId_set
    __swig_getmethods__["clientId"] = _scopefunapi.csClientDisplay_clientId_get
    if _newclass:
        clientId = _swig_property(_scopefunapi.csClientDisplay_clientId_get, _scopefunapi.csClientDisplay_clientId_set)

    def __init__(self):
        this = _scopefunapi.new_csClientDisplay()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csClientDisplay
    __del__ = lambda self: None
csClientDisplay_swigregister = _scopefunapi.csClientDisplay_swigregister
csClientDisplay_swigregister(csClientDisplay)

class csUpload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csUpload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csUpload, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csUpload_header_set
    __swig_getmethods__["header"] = _scopefunapi.csUpload_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csUpload_header_get, _scopefunapi.csUpload_header_set)
    __swig_setmethods__["frame"] = _scopefunapi.csUpload_frame_set
    __swig_getmethods__["frame"] = _scopefunapi.csUpload_frame_get
    if _newclass:
        frame = _swig_property(_scopefunapi.csUpload_frame_get, _scopefunapi.csUpload_frame_set)
    __swig_setmethods__["simulate"] = _scopefunapi.csUpload_simulate_set
    __swig_getmethods__["simulate"] = _scopefunapi.csUpload_simulate_get
    if _newclass:
        simulate = _swig_property(_scopefunapi.csUpload_simulate_get, _scopefunapi.csUpload_simulate_set)
    __swig_setmethods__["simOnOff"] = _scopefunapi.csUpload_simOnOff_set
    __swig_getmethods__["simOnOff"] = _scopefunapi.csUpload_simOnOff_get
    if _newclass:
        simOnOff = _swig_property(_scopefunapi.csUpload_simOnOff_get, _scopefunapi.csUpload_simOnOff_set)

    def __init__(self):
        this = _scopefunapi.new_csUpload()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csUpload
    __del__ = lambda self: None
csUpload_swigregister = _scopefunapi.csUpload_swigregister
csUpload_swigregister(csUpload)

class csDownload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csDownload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csDownload, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csDownload_header_set
    __swig_getmethods__["header"] = _scopefunapi.csDownload_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csDownload_header_get, _scopefunapi.csDownload_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.csDownload_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.csDownload_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.csDownload_reserved_get, _scopefunapi.csDownload_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_csDownload()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csDownload
    __del__ = lambda self: None
csDownload_swigregister = _scopefunapi.csDownload_swigregister
csDownload_swigregister(csDownload)

class csHardwareOpen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareOpen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareOpen, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareOpen_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareOpen_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareOpen_header_get, _scopefunapi.csHardwareOpen_header_set)
    __swig_setmethods__["usb"] = _scopefunapi.csHardwareOpen_usb_set
    __swig_getmethods__["usb"] = _scopefunapi.csHardwareOpen_usb_get
    if _newclass:
        usb = _swig_property(_scopefunapi.csHardwareOpen_usb_get, _scopefunapi.csHardwareOpen_usb_set)
    __swig_setmethods__["version"] = _scopefunapi.csHardwareOpen_version_set
    __swig_getmethods__["version"] = _scopefunapi.csHardwareOpen_version_get
    if _newclass:
        version = _swig_property(_scopefunapi.csHardwareOpen_version_get, _scopefunapi.csHardwareOpen_version_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareOpen()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareOpen
    __del__ = lambda self: None
csHardwareOpen_swigregister = _scopefunapi.csHardwareOpen_swigregister
csHardwareOpen_swigregister(csHardwareOpen)

class csHardwareIsOpened(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareIsOpened, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareIsOpened, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareIsOpened_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareIsOpened_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareIsOpened_header_get, _scopefunapi.csHardwareIsOpened_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.csHardwareIsOpened_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.csHardwareIsOpened_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.csHardwareIsOpened_reserved_get, _scopefunapi.csHardwareIsOpened_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareIsOpened()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareIsOpened
    __del__ = lambda self: None
csHardwareIsOpened_swigregister = _scopefunapi.csHardwareIsOpened_swigregister
csHardwareIsOpened_swigregister(csHardwareIsOpened)

class csHardwareReset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareReset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareReset, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareReset_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareReset_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareReset_header_get, _scopefunapi.csHardwareReset_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.csHardwareReset_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.csHardwareReset_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.csHardwareReset_reserved_get, _scopefunapi.csHardwareReset_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareReset()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareReset
    __del__ = lambda self: None
csHardwareReset_swigregister = _scopefunapi.csHardwareReset_swigregister
csHardwareReset_swigregister(csHardwareReset)

class csHardwareConfig1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareConfig1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareConfig1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareConfig1_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareConfig1_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareConfig1_header_get, _scopefunapi.csHardwareConfig1_header_set)
    __swig_setmethods__["config"] = _scopefunapi.csHardwareConfig1_config_set
    __swig_getmethods__["config"] = _scopefunapi.csHardwareConfig1_config_get
    if _newclass:
        config = _swig_property(_scopefunapi.csHardwareConfig1_config_get, _scopefunapi.csHardwareConfig1_config_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareConfig1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareConfig1
    __del__ = lambda self: None
csHardwareConfig1_swigregister = _scopefunapi.csHardwareConfig1_swigregister
csHardwareConfig1_swigregister(csHardwareConfig1)

class csHardwareConfig2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareConfig2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareConfig2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareConfig2_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareConfig2_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareConfig2_header_get, _scopefunapi.csHardwareConfig2_header_set)
    __swig_setmethods__["config"] = _scopefunapi.csHardwareConfig2_config_set
    __swig_getmethods__["config"] = _scopefunapi.csHardwareConfig2_config_get
    if _newclass:
        config = _swig_property(_scopefunapi.csHardwareConfig2_config_get, _scopefunapi.csHardwareConfig2_config_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareConfig2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareConfig2
    __del__ = lambda self: None
csHardwareConfig2_swigregister = _scopefunapi.csHardwareConfig2_swigregister
csHardwareConfig2_swigregister(csHardwareConfig2)

class csHardwareCapture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareCapture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareCapture, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareCapture_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareCapture_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareCapture_header_get, _scopefunapi.csHardwareCapture_header_set)
    __swig_setmethods__["len"] = _scopefunapi.csHardwareCapture_len_set
    __swig_getmethods__["len"] = _scopefunapi.csHardwareCapture_len_get
    if _newclass:
        len = _swig_property(_scopefunapi.csHardwareCapture_len_get, _scopefunapi.csHardwareCapture_len_set)
    __swig_setmethods__["type"] = _scopefunapi.csHardwareCapture_type_set
    __swig_getmethods__["type"] = _scopefunapi.csHardwareCapture_type_get
    if _newclass:
        type = _swig_property(_scopefunapi.csHardwareCapture_type_get, _scopefunapi.csHardwareCapture_type_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareCapture()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareCapture
    __del__ = lambda self: None
csHardwareCapture_swigregister = _scopefunapi.csHardwareCapture_swigregister
csHardwareCapture_swigregister(csHardwareCapture)

class csHardwareUploadFx2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareUploadFx2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareUploadFx2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareUploadFx2_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareUploadFx2_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareUploadFx2_header_get, _scopefunapi.csHardwareUploadFx2_header_set)
    __swig_setmethods__["fx2"] = _scopefunapi.csHardwareUploadFx2_fx2_set
    __swig_getmethods__["fx2"] = _scopefunapi.csHardwareUploadFx2_fx2_get
    if _newclass:
        fx2 = _swig_property(_scopefunapi.csHardwareUploadFx2_fx2_get, _scopefunapi.csHardwareUploadFx2_fx2_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareUploadFx2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareUploadFx2
    __del__ = lambda self: None
csHardwareUploadFx2_swigregister = _scopefunapi.csHardwareUploadFx2_swigregister
csHardwareUploadFx2_swigregister(csHardwareUploadFx2)

class csHardwareUploadFpga(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareUploadFpga, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareUploadFpga, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareUploadFpga_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareUploadFpga_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareUploadFpga_header_get, _scopefunapi.csHardwareUploadFpga_header_set)
    __swig_setmethods__["fpga"] = _scopefunapi.csHardwareUploadFpga_fpga_set
    __swig_getmethods__["fpga"] = _scopefunapi.csHardwareUploadFpga_fpga_get
    if _newclass:
        fpga = _swig_property(_scopefunapi.csHardwareUploadFpga_fpga_get, _scopefunapi.csHardwareUploadFpga_fpga_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareUploadFpga()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareUploadFpga
    __del__ = lambda self: None
csHardwareUploadFpga_swigregister = _scopefunapi.csHardwareUploadFpga_swigregister
csHardwareUploadFpga_swigregister(csHardwareUploadFpga)

class csHardwareUploadGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareUploadGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareUploadGenerator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareUploadGenerator_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareUploadGenerator_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareUploadGenerator_header_get, _scopefunapi.csHardwareUploadGenerator_header_set)
    __swig_setmethods__["data"] = _scopefunapi.csHardwareUploadGenerator_data_set
    __swig_getmethods__["data"] = _scopefunapi.csHardwareUploadGenerator_data_get
    if _newclass:
        data = _swig_property(_scopefunapi.csHardwareUploadGenerator_data_get, _scopefunapi.csHardwareUploadGenerator_data_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareUploadGenerator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareUploadGenerator
    __del__ = lambda self: None
csHardwareUploadGenerator_swigregister = _scopefunapi.csHardwareUploadGenerator_swigregister
csHardwareUploadGenerator_swigregister(csHardwareUploadGenerator)

class csHardwareEepromRead(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareEepromRead, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareEepromRead, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareEepromRead_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareEepromRead_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareEepromRead_header_get, _scopefunapi.csHardwareEepromRead_header_set)
    __swig_setmethods__["size"] = _scopefunapi.csHardwareEepromRead_size_set
    __swig_getmethods__["size"] = _scopefunapi.csHardwareEepromRead_size_get
    if _newclass:
        size = _swig_property(_scopefunapi.csHardwareEepromRead_size_get, _scopefunapi.csHardwareEepromRead_size_set)
    __swig_setmethods__["address"] = _scopefunapi.csHardwareEepromRead_address_set
    __swig_getmethods__["address"] = _scopefunapi.csHardwareEepromRead_address_get
    if _newclass:
        address = _swig_property(_scopefunapi.csHardwareEepromRead_address_get, _scopefunapi.csHardwareEepromRead_address_set)
    __swig_setmethods__["reserved"] = _scopefunapi.csHardwareEepromRead_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.csHardwareEepromRead_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.csHardwareEepromRead_reserved_get, _scopefunapi.csHardwareEepromRead_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareEepromRead()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareEepromRead
    __del__ = lambda self: None
csHardwareEepromRead_swigregister = _scopefunapi.csHardwareEepromRead_swigregister
csHardwareEepromRead_swigregister(csHardwareEepromRead)

class csHardwareEepromReadFirmwareID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareEepromReadFirmwareID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareEepromReadFirmwareID, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareEepromReadFirmwareID_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareEepromReadFirmwareID_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareEepromReadFirmwareID_header_get, _scopefunapi.csHardwareEepromReadFirmwareID_header_set)
    __swig_setmethods__["size"] = _scopefunapi.csHardwareEepromReadFirmwareID_size_set
    __swig_getmethods__["size"] = _scopefunapi.csHardwareEepromReadFirmwareID_size_get
    if _newclass:
        size = _swig_property(_scopefunapi.csHardwareEepromReadFirmwareID_size_get, _scopefunapi.csHardwareEepromReadFirmwareID_size_set)
    __swig_setmethods__["address"] = _scopefunapi.csHardwareEepromReadFirmwareID_address_set
    __swig_getmethods__["address"] = _scopefunapi.csHardwareEepromReadFirmwareID_address_get
    if _newclass:
        address = _swig_property(_scopefunapi.csHardwareEepromReadFirmwareID_address_get, _scopefunapi.csHardwareEepromReadFirmwareID_address_set)
    __swig_setmethods__["reserved"] = _scopefunapi.csHardwareEepromReadFirmwareID_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.csHardwareEepromReadFirmwareID_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.csHardwareEepromReadFirmwareID_reserved_get, _scopefunapi.csHardwareEepromReadFirmwareID_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareEepromReadFirmwareID()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareEepromReadFirmwareID
    __del__ = lambda self: None
csHardwareEepromReadFirmwareID_swigregister = _scopefunapi.csHardwareEepromReadFirmwareID_swigregister
csHardwareEepromReadFirmwareID_swigregister(csHardwareEepromReadFirmwareID)

class csHardwareEepromWrite(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareEepromWrite, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareEepromWrite, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareEepromWrite_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareEepromWrite_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareEepromWrite_header_get, _scopefunapi.csHardwareEepromWrite_header_set)
    __swig_setmethods__["size"] = _scopefunapi.csHardwareEepromWrite_size_set
    __swig_getmethods__["size"] = _scopefunapi.csHardwareEepromWrite_size_get
    if _newclass:
        size = _swig_property(_scopefunapi.csHardwareEepromWrite_size_get, _scopefunapi.csHardwareEepromWrite_size_set)
    __swig_setmethods__["address"] = _scopefunapi.csHardwareEepromWrite_address_set
    __swig_getmethods__["address"] = _scopefunapi.csHardwareEepromWrite_address_get
    if _newclass:
        address = _swig_property(_scopefunapi.csHardwareEepromWrite_address_get, _scopefunapi.csHardwareEepromWrite_address_set)
    __swig_setmethods__["eeprom"] = _scopefunapi.csHardwareEepromWrite_eeprom_set
    __swig_getmethods__["eeprom"] = _scopefunapi.csHardwareEepromWrite_eeprom_get
    if _newclass:
        eeprom = _swig_property(_scopefunapi.csHardwareEepromWrite_eeprom_get, _scopefunapi.csHardwareEepromWrite_eeprom_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareEepromWrite()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareEepromWrite
    __del__ = lambda self: None
csHardwareEepromWrite_swigregister = _scopefunapi.csHardwareEepromWrite_swigregister
csHardwareEepromWrite_swigregister(csHardwareEepromWrite)

class csHardwareEepromErase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareEepromErase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareEepromErase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareEepromErase_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareEepromErase_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareEepromErase_header_get, _scopefunapi.csHardwareEepromErase_header_set)
    __swig_setmethods__["erase"] = _scopefunapi.csHardwareEepromErase_erase_set
    __swig_getmethods__["erase"] = _scopefunapi.csHardwareEepromErase_erase_get
    if _newclass:
        erase = _swig_property(_scopefunapi.csHardwareEepromErase_erase_get, _scopefunapi.csHardwareEepromErase_erase_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareEepromErase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareEepromErase
    __del__ = lambda self: None
csHardwareEepromErase_swigregister = _scopefunapi.csHardwareEepromErase_swigregister
csHardwareEepromErase_swigregister(csHardwareEepromErase)

class csHardwareClose(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csHardwareClose, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csHardwareClose, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.csHardwareClose_header_set
    __swig_getmethods__["header"] = _scopefunapi.csHardwareClose_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.csHardwareClose_header_get, _scopefunapi.csHardwareClose_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.csHardwareClose_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.csHardwareClose_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.csHardwareClose_reserved_get, _scopefunapi.csHardwareClose_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_csHardwareClose()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_csHardwareClose
    __del__ = lambda self: None
csHardwareClose_swigregister = _scopefunapi.csHardwareClose_swigregister
csHardwareClose_swigregister(csHardwareClose)

class scClientConnect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scClientConnect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scClientConnect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scClientConnect_header_set
    __swig_getmethods__["header"] = _scopefunapi.scClientConnect_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scClientConnect_header_get, _scopefunapi.scClientConnect_header_set)
    __swig_setmethods__["id"] = _scopefunapi.scClientConnect_id_set
    __swig_getmethods__["id"] = _scopefunapi.scClientConnect_id_get
    if _newclass:
        id = _swig_property(_scopefunapi.scClientConnect_id_get, _scopefunapi.scClientConnect_id_set)

    def __init__(self):
        this = _scopefunapi.new_scClientConnect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scClientConnect
    __del__ = lambda self: None
scClientConnect_swigregister = _scopefunapi.scClientConnect_swigregister
scClientConnect_swigregister(scClientConnect)

class scClientDisconnect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scClientDisconnect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scClientDisconnect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scClientDisconnect_header_set
    __swig_getmethods__["header"] = _scopefunapi.scClientDisconnect_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scClientDisconnect_header_get, _scopefunapi.scClientDisconnect_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scClientDisconnect_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scClientDisconnect_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scClientDisconnect_reserved_get, _scopefunapi.scClientDisconnect_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scClientDisconnect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scClientDisconnect
    __del__ = lambda self: None
scClientDisconnect_swigregister = _scopefunapi.scClientDisconnect_swigregister
scClientDisconnect_swigregister(scClientDisconnect)

class scClientDisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scClientDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scClientDisplay, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scClientDisplay_header_set
    __swig_getmethods__["header"] = _scopefunapi.scClientDisplay_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scClientDisplay_header_get, _scopefunapi.scClientDisplay_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scClientDisplay_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scClientDisplay_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scClientDisplay_reserved_get, _scopefunapi.scClientDisplay_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scClientDisplay()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scClientDisplay
    __del__ = lambda self: None
scClientDisplay_swigregister = _scopefunapi.scClientDisplay_swigregister
scClientDisplay_swigregister(scClientDisplay)

class scUpload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scUpload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scUpload, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scUpload_header_set
    __swig_getmethods__["header"] = _scopefunapi.scUpload_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scUpload_header_get, _scopefunapi.scUpload_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scUpload_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scUpload_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scUpload_reserved_get, _scopefunapi.scUpload_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scUpload()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scUpload
    __del__ = lambda self: None
scUpload_swigregister = _scopefunapi.scUpload_swigregister
scUpload_swigregister(scUpload)

class scDownload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scDownload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scDownload, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scDownload_header_set
    __swig_getmethods__["header"] = _scopefunapi.scDownload_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scDownload_header_get, _scopefunapi.scDownload_header_set)
    __swig_setmethods__["frame"] = _scopefunapi.scDownload_frame_set
    __swig_getmethods__["frame"] = _scopefunapi.scDownload_frame_get
    if _newclass:
        frame = _swig_property(_scopefunapi.scDownload_frame_get, _scopefunapi.scDownload_frame_set)
    __swig_setmethods__["simulate"] = _scopefunapi.scDownload_simulate_set
    __swig_getmethods__["simulate"] = _scopefunapi.scDownload_simulate_get
    if _newclass:
        simulate = _swig_property(_scopefunapi.scDownload_simulate_get, _scopefunapi.scDownload_simulate_set)
    __swig_setmethods__["simOnOff"] = _scopefunapi.scDownload_simOnOff_set
    __swig_getmethods__["simOnOff"] = _scopefunapi.scDownload_simOnOff_get
    if _newclass:
        simOnOff = _swig_property(_scopefunapi.scDownload_simOnOff_get, _scopefunapi.scDownload_simOnOff_set)
    __swig_setmethods__["display"] = _scopefunapi.scDownload_display_set
    __swig_getmethods__["display"] = _scopefunapi.scDownload_display_get
    if _newclass:
        display = _swig_property(_scopefunapi.scDownload_display_get, _scopefunapi.scDownload_display_set)
    __swig_setmethods__["active"] = _scopefunapi.scDownload_active_set
    __swig_getmethods__["active"] = _scopefunapi.scDownload_active_get
    if _newclass:
        active = _swig_property(_scopefunapi.scDownload_active_get, _scopefunapi.scDownload_active_set)

    def __init__(self):
        this = _scopefunapi.new_scDownload()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scDownload
    __del__ = lambda self: None
scDownload_swigregister = _scopefunapi.scDownload_swigregister
scDownload_swigregister(scDownload)

class scHardwareOpen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareOpen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareOpen, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareOpen_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareOpen_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareOpen_header_get, _scopefunapi.scHardwareOpen_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scHardwareOpen_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scHardwareOpen_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scHardwareOpen_reserved_get, _scopefunapi.scHardwareOpen_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareOpen()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareOpen
    __del__ = lambda self: None
scHardwareOpen_swigregister = _scopefunapi.scHardwareOpen_swigregister
scHardwareOpen_swigregister(scHardwareOpen)

class scHardwareIsOpened(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareIsOpened, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareIsOpened, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareIsOpened_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareIsOpened_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareIsOpened_header_get, _scopefunapi.scHardwareIsOpened_header_set)
    __swig_setmethods__["opened"] = _scopefunapi.scHardwareIsOpened_opened_set
    __swig_getmethods__["opened"] = _scopefunapi.scHardwareIsOpened_opened_get
    if _newclass:
        opened = _swig_property(_scopefunapi.scHardwareIsOpened_opened_get, _scopefunapi.scHardwareIsOpened_opened_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareIsOpened()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareIsOpened
    __del__ = lambda self: None
scHardwareIsOpened_swigregister = _scopefunapi.scHardwareIsOpened_swigregister
scHardwareIsOpened_swigregister(scHardwareIsOpened)

class scHardwareReset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareReset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareReset, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareReset_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareReset_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareReset_header_get, _scopefunapi.scHardwareReset_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scHardwareReset_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scHardwareReset_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scHardwareReset_reserved_get, _scopefunapi.scHardwareReset_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareReset()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareReset
    __del__ = lambda self: None
scHardwareReset_swigregister = _scopefunapi.scHardwareReset_swigregister
scHardwareReset_swigregister(scHardwareReset)

class scHardwareConfig1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareConfig1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareConfig1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareConfig1_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareConfig1_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareConfig1_header_get, _scopefunapi.scHardwareConfig1_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scHardwareConfig1_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scHardwareConfig1_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scHardwareConfig1_reserved_get, _scopefunapi.scHardwareConfig1_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareConfig1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareConfig1
    __del__ = lambda self: None
scHardwareConfig1_swigregister = _scopefunapi.scHardwareConfig1_swigregister
scHardwareConfig1_swigregister(scHardwareConfig1)

class scHardwareConfig2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareConfig2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareConfig2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareConfig2_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareConfig2_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareConfig2_header_get, _scopefunapi.scHardwareConfig2_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scHardwareConfig2_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scHardwareConfig2_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scHardwareConfig2_reserved_get, _scopefunapi.scHardwareConfig2_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareConfig2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareConfig2
    __del__ = lambda self: None
scHardwareConfig2_swigregister = _scopefunapi.scHardwareConfig2_swigregister
scHardwareConfig2_swigregister(scHardwareConfig2)

class scHardwareCapture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareCapture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareCapture, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareCapture_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareCapture_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareCapture_header_get, _scopefunapi.scHardwareCapture_header_set)
    __swig_setmethods__["bytes"] = _scopefunapi.scHardwareCapture_bytes_set
    __swig_getmethods__["bytes"] = _scopefunapi.scHardwareCapture_bytes_get
    if _newclass:
        bytes = _swig_property(_scopefunapi.scHardwareCapture_bytes_get, _scopefunapi.scHardwareCapture_bytes_set)
    __swig_setmethods__["data"] = _scopefunapi.scHardwareCapture_data_set
    __swig_getmethods__["data"] = _scopefunapi.scHardwareCapture_data_get
    if _newclass:
        data = _swig_property(_scopefunapi.scHardwareCapture_data_get, _scopefunapi.scHardwareCapture_data_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareCapture()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareCapture
    __del__ = lambda self: None
scHardwareCapture_swigregister = _scopefunapi.scHardwareCapture_swigregister
scHardwareCapture_swigregister(scHardwareCapture)

class scHardwareUploadFx2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareUploadFx2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareUploadFx2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareUploadFx2_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareUploadFx2_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareUploadFx2_header_get, _scopefunapi.scHardwareUploadFx2_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scHardwareUploadFx2_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scHardwareUploadFx2_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scHardwareUploadFx2_reserved_get, _scopefunapi.scHardwareUploadFx2_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareUploadFx2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareUploadFx2
    __del__ = lambda self: None
scHardwareUploadFx2_swigregister = _scopefunapi.scHardwareUploadFx2_swigregister
scHardwareUploadFx2_swigregister(scHardwareUploadFx2)

class scHardwareUploadFpga(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareUploadFpga, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareUploadFpga, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareUploadFpga_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareUploadFpga_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareUploadFpga_header_get, _scopefunapi.scHardwareUploadFpga_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scHardwareUploadFpga_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scHardwareUploadFpga_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scHardwareUploadFpga_reserved_get, _scopefunapi.scHardwareUploadFpga_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareUploadFpga()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareUploadFpga
    __del__ = lambda self: None
scHardwareUploadFpga_swigregister = _scopefunapi.scHardwareUploadFpga_swigregister
scHardwareUploadFpga_swigregister(scHardwareUploadFpga)

class scHardwareUploadGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareUploadGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareUploadGenerator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareUploadGenerator_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareUploadGenerator_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareUploadGenerator_header_get, _scopefunapi.scHardwareUploadGenerator_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scHardwareUploadGenerator_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scHardwareUploadGenerator_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scHardwareUploadGenerator_reserved_get, _scopefunapi.scHardwareUploadGenerator_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareUploadGenerator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareUploadGenerator
    __del__ = lambda self: None
scHardwareUploadGenerator_swigregister = _scopefunapi.scHardwareUploadGenerator_swigregister
scHardwareUploadGenerator_swigregister(scHardwareUploadGenerator)

class scHardwareEepromRead(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareEepromRead, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareEepromRead, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareEepromRead_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareEepromRead_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareEepromRead_header_get, _scopefunapi.scHardwareEepromRead_header_set)
    __swig_setmethods__["eeprom"] = _scopefunapi.scHardwareEepromRead_eeprom_set
    __swig_getmethods__["eeprom"] = _scopefunapi.scHardwareEepromRead_eeprom_get
    if _newclass:
        eeprom = _swig_property(_scopefunapi.scHardwareEepromRead_eeprom_get, _scopefunapi.scHardwareEepromRead_eeprom_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareEepromRead()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareEepromRead
    __del__ = lambda self: None
scHardwareEepromRead_swigregister = _scopefunapi.scHardwareEepromRead_swigregister
scHardwareEepromRead_swigregister(scHardwareEepromRead)

class scHardwareEepromReadFirmwareID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareEepromReadFirmwareID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareEepromReadFirmwareID, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareEepromReadFirmwareID_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareEepromReadFirmwareID_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareEepromReadFirmwareID_header_get, _scopefunapi.scHardwareEepromReadFirmwareID_header_set)
    __swig_setmethods__["eeprom"] = _scopefunapi.scHardwareEepromReadFirmwareID_eeprom_set
    __swig_getmethods__["eeprom"] = _scopefunapi.scHardwareEepromReadFirmwareID_eeprom_get
    if _newclass:
        eeprom = _swig_property(_scopefunapi.scHardwareEepromReadFirmwareID_eeprom_get, _scopefunapi.scHardwareEepromReadFirmwareID_eeprom_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareEepromReadFirmwareID()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareEepromReadFirmwareID
    __del__ = lambda self: None
scHardwareEepromReadFirmwareID_swigregister = _scopefunapi.scHardwareEepromReadFirmwareID_swigregister
scHardwareEepromReadFirmwareID_swigregister(scHardwareEepromReadFirmwareID)

class scHardwareEepromWrite(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareEepromWrite, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareEepromWrite, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareEepromWrite_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareEepromWrite_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareEepromWrite_header_get, _scopefunapi.scHardwareEepromWrite_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scHardwareEepromWrite_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scHardwareEepromWrite_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scHardwareEepromWrite_reserved_get, _scopefunapi.scHardwareEepromWrite_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareEepromWrite()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareEepromWrite
    __del__ = lambda self: None
scHardwareEepromWrite_swigregister = _scopefunapi.scHardwareEepromWrite_swigregister
scHardwareEepromWrite_swigregister(scHardwareEepromWrite)

class scHardwareEepromErase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareEepromErase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareEepromErase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareEepromErase_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareEepromErase_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareEepromErase_header_get, _scopefunapi.scHardwareEepromErase_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scHardwareEepromErase_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scHardwareEepromErase_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scHardwareEepromErase_reserved_get, _scopefunapi.scHardwareEepromErase_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareEepromErase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareEepromErase
    __del__ = lambda self: None
scHardwareEepromErase_swigregister = _scopefunapi.scHardwareEepromErase_swigregister
scHardwareEepromErase_swigregister(scHardwareEepromErase)

class scHardwareClose(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scHardwareClose, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scHardwareClose, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _scopefunapi.scHardwareClose_header_set
    __swig_getmethods__["header"] = _scopefunapi.scHardwareClose_header_get
    if _newclass:
        header = _swig_property(_scopefunapi.scHardwareClose_header_get, _scopefunapi.scHardwareClose_header_set)
    __swig_setmethods__["reserved"] = _scopefunapi.scHardwareClose_reserved_set
    __swig_getmethods__["reserved"] = _scopefunapi.scHardwareClose_reserved_get
    if _newclass:
        reserved = _swig_property(_scopefunapi.scHardwareClose_reserved_get, _scopefunapi.scHardwareClose_reserved_set)

    def __init__(self):
        this = _scopefunapi.new_scHardwareClose()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_scHardwareClose
    __del__ = lambda self: None
scHardwareClose_swigregister = _scopefunapi.scHardwareClose_swigregister
scHardwareClose_swigregister(scHardwareClose)

class SAtomic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SAtomic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SAtomic, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _scopefunapi.SAtomic_value_set
    __swig_getmethods__["value"] = _scopefunapi.SAtomic_value_get
    if _newclass:
        value = _swig_property(_scopefunapi.SAtomic_value_get, _scopefunapi.SAtomic_value_set)

    def __init__(self):
        this = _scopefunapi.new_SAtomic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SAtomic
    __del__ = lambda self: None
SAtomic_swigregister = _scopefunapi.SAtomic_swigregister
SAtomic_swigregister(SAtomic)

class SCtxSimulate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCtxSimulate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCtxSimulate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["on"] = _scopefunapi.SCtxSimulate_on_set
    __swig_getmethods__["on"] = _scopefunapi.SCtxSimulate_on_get
    if _newclass:
        on = _swig_property(_scopefunapi.SCtxSimulate_on_get, _scopefunapi.SCtxSimulate_on_set)
    __swig_setmethods__["data"] = _scopefunapi.SCtxSimulate_data_set
    __swig_getmethods__["data"] = _scopefunapi.SCtxSimulate_data_get
    if _newclass:
        data = _swig_property(_scopefunapi.SCtxSimulate_data_get, _scopefunapi.SCtxSimulate_data_set)
    __swig_setmethods__["active"] = _scopefunapi.SCtxSimulate_active_set
    __swig_getmethods__["active"] = _scopefunapi.SCtxSimulate_active_get
    if _newclass:
        active = _swig_property(_scopefunapi.SCtxSimulate_active_get, _scopefunapi.SCtxSimulate_active_set)

    def __init__(self):
        this = _scopefunapi.new_SCtxSimulate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SCtxSimulate
    __del__ = lambda self: None
SCtxSimulate_swigregister = _scopefunapi.SCtxSimulate_swigregister
SCtxSimulate_swigregister(SCtxSimulate)

class SCtxFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCtxFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCtxFrame, name)
    __repr__ = _swig_repr
    __swig_setmethods__["maxMemory"] = _scopefunapi.SCtxFrame_maxMemory_set
    __swig_getmethods__["maxMemory"] = _scopefunapi.SCtxFrame_maxMemory_get
    if _newclass:
        maxMemory = _swig_property(_scopefunapi.SCtxFrame_maxMemory_get, _scopefunapi.SCtxFrame_maxMemory_set)
    __swig_setmethods__["data"] = _scopefunapi.SCtxFrame_data_set
    __swig_getmethods__["data"] = _scopefunapi.SCtxFrame_data_get
    if _newclass:
        data = _swig_property(_scopefunapi.SCtxFrame_data_get, _scopefunapi.SCtxFrame_data_set)
    __swig_setmethods__["info"] = _scopefunapi.SCtxFrame_info_set
    __swig_getmethods__["info"] = _scopefunapi.SCtxFrame_info_get
    if _newclass:
        info = _swig_property(_scopefunapi.SCtxFrame_info_get, _scopefunapi.SCtxFrame_info_set)
    __swig_setmethods__["received"] = _scopefunapi.SCtxFrame_received_set
    __swig_getmethods__["received"] = _scopefunapi.SCtxFrame_received_get
    if _newclass:
        received = _swig_property(_scopefunapi.SCtxFrame_received_get, _scopefunapi.SCtxFrame_received_set)

    def __init__(self):
        this = _scopefunapi.new_SCtxFrame()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SCtxFrame
    __del__ = lambda self: None
SCtxFrame_swigregister = _scopefunapi.SCtxFrame_swigregister
SCtxFrame_swigregister(SCtxFrame)

class SCtxDisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCtxDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCtxDisplay, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _scopefunapi.SCtxDisplay_data_set
    __swig_getmethods__["data"] = _scopefunapi.SCtxDisplay_data_get
    if _newclass:
        data = _swig_property(_scopefunapi.SCtxDisplay_data_get, _scopefunapi.SCtxDisplay_data_set)

    def __init__(self):
        this = _scopefunapi.new_SCtxDisplay()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SCtxDisplay
    __del__ = lambda self: None
SCtxDisplay_swigregister = _scopefunapi.SCtxDisplay_swigregister
SCtxDisplay_swigregister(SCtxDisplay)

class SCtxApi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCtxApi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCtxApi, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _scopefunapi.SCtxApi_version_set
    __swig_getmethods__["version"] = _scopefunapi.SCtxApi_version_get
    if _newclass:
        version = _swig_property(_scopefunapi.SCtxApi_version_get, _scopefunapi.SCtxApi_version_set)
    __swig_setmethods__["major"] = _scopefunapi.SCtxApi_major_set
    __swig_getmethods__["major"] = _scopefunapi.SCtxApi_major_get
    if _newclass:
        major = _swig_property(_scopefunapi.SCtxApi_major_get, _scopefunapi.SCtxApi_major_set)
    __swig_setmethods__["minor"] = _scopefunapi.SCtxApi_minor_set
    __swig_getmethods__["minor"] = _scopefunapi.SCtxApi_minor_get
    if _newclass:
        minor = _swig_property(_scopefunapi.SCtxApi_minor_get, _scopefunapi.SCtxApi_minor_set)
    __swig_setmethods__["active"] = _scopefunapi.SCtxApi_active_set
    __swig_getmethods__["active"] = _scopefunapi.SCtxApi_active_get
    if _newclass:
        active = _swig_property(_scopefunapi.SCtxApi_active_get, _scopefunapi.SCtxApi_active_set)
    __swig_setmethods__["mode"] = _scopefunapi.SCtxApi_mode_set
    __swig_getmethods__["mode"] = _scopefunapi.SCtxApi_mode_get
    if _newclass:
        mode = _swig_property(_scopefunapi.SCtxApi_mode_get, _scopefunapi.SCtxApi_mode_set)
    __swig_setmethods__["thread"] = _scopefunapi.SCtxApi_thread_set
    __swig_getmethods__["thread"] = _scopefunapi.SCtxApi_thread_get
    if _newclass:
        thread = _swig_property(_scopefunapi.SCtxApi_thread_get, _scopefunapi.SCtxApi_thread_set)
    __swig_setmethods__["lock"] = _scopefunapi.SCtxApi_lock_set
    __swig_getmethods__["lock"] = _scopefunapi.SCtxApi_lock_get
    if _newclass:
        lock = _swig_property(_scopefunapi.SCtxApi_lock_get, _scopefunapi.SCtxApi_lock_set)
    __swig_setmethods__["timeout"] = _scopefunapi.SCtxApi_timeout_set
    __swig_getmethods__["timeout"] = _scopefunapi.SCtxApi_timeout_get
    if _newclass:
        timeout = _swig_property(_scopefunapi.SCtxApi_timeout_get, _scopefunapi.SCtxApi_timeout_set)

    def __init__(self):
        this = _scopefunapi.new_SCtxApi()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SCtxApi
    __del__ = lambda self: None
SCtxApi_swigregister = _scopefunapi.SCtxApi_swigregister
SCtxApi_swigregister(SCtxApi)

class SCtxServer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCtxServer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCtxServer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["active"] = _scopefunapi.SCtxServer_active_set
    __swig_getmethods__["active"] = _scopefunapi.SCtxServer_active_get
    if _newclass:
        active = _swig_property(_scopefunapi.SCtxServer_active_get, _scopefunapi.SCtxServer_active_set)

    def __init__(self):
        this = _scopefunapi.new_SCtxServer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SCtxServer
    __del__ = lambda self: None
SCtxServer_swigregister = _scopefunapi.SCtxServer_swigregister
SCtxServer_swigregister(SCtxServer)

class SCtxClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCtxClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCtxClient, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _scopefunapi.SCtxClient_id_set
    __swig_getmethods__["id"] = _scopefunapi.SCtxClient_id_get
    if _newclass:
        id = _swig_property(_scopefunapi.SCtxClient_id_get, _scopefunapi.SCtxClient_id_set)
    __swig_setmethods__["connected"] = _scopefunapi.SCtxClient_connected_set
    __swig_getmethods__["connected"] = _scopefunapi.SCtxClient_connected_get
    if _newclass:
        connected = _swig_property(_scopefunapi.SCtxClient_connected_get, _scopefunapi.SCtxClient_connected_set)
    __swig_setmethods__["display"] = _scopefunapi.SCtxClient_display_set
    __swig_getmethods__["display"] = _scopefunapi.SCtxClient_display_get
    if _newclass:
        display = _swig_property(_scopefunapi.SCtxClient_display_get, _scopefunapi.SCtxClient_display_set)

    def __init__(self):
        this = _scopefunapi.new_SCtxClient()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SCtxClient
    __del__ = lambda self: None
SCtxClient_swigregister = _scopefunapi.SCtxClient_swigregister
SCtxClient_swigregister(SCtxClient)

class SFContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFContext, name)
    __repr__ = _swig_repr
    __swig_setmethods__["api"] = _scopefunapi.SFContext_api_set
    __swig_getmethods__["api"] = _scopefunapi.SFContext_api_get
    if _newclass:
        api = _swig_property(_scopefunapi.SFContext_api_get, _scopefunapi.SFContext_api_set)
    __swig_setmethods__["simulate"] = _scopefunapi.SFContext_simulate_set
    __swig_getmethods__["simulate"] = _scopefunapi.SFContext_simulate_get
    if _newclass:
        simulate = _swig_property(_scopefunapi.SFContext_simulate_get, _scopefunapi.SFContext_simulate_set)
    __swig_setmethods__["frame"] = _scopefunapi.SFContext_frame_set
    __swig_getmethods__["frame"] = _scopefunapi.SFContext_frame_get
    if _newclass:
        frame = _swig_property(_scopefunapi.SFContext_frame_get, _scopefunapi.SFContext_frame_set)
    __swig_setmethods__["server"] = _scopefunapi.SFContext_server_set
    __swig_getmethods__["server"] = _scopefunapi.SFContext_server_get
    if _newclass:
        server = _swig_property(_scopefunapi.SFContext_server_get, _scopefunapi.SFContext_server_set)
    __swig_setmethods__["client"] = _scopefunapi.SFContext_client_set
    __swig_getmethods__["client"] = _scopefunapi.SFContext_client_get
    if _newclass:
        client = _swig_property(_scopefunapi.SFContext_client_get, _scopefunapi.SFContext_client_set)
    __swig_setmethods__["net"] = _scopefunapi.SFContext_net_set
    __swig_getmethods__["net"] = _scopefunapi.SFContext_net_get
    if _newclass:
        net = _swig_property(_scopefunapi.SFContext_net_get, _scopefunapi.SFContext_net_set)
    __swig_setmethods__["usb"] = _scopefunapi.SFContext_usb_set
    __swig_getmethods__["usb"] = _scopefunapi.SFContext_usb_get
    if _newclass:
        usb = _swig_property(_scopefunapi.SFContext_usb_get, _scopefunapi.SFContext_usb_set)

    def __init__(self):
        this = _scopefunapi.new_SFContext()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scopefunapi.delete_SFContext
    __del__ = lambda self: None
SFContext_swigregister = _scopefunapi.SFContext_swigregister
SFContext_swigregister(SFContext)


def sfCreateSFContext():
    return _scopefunapi.sfCreateSFContext()
sfCreateSFContext = _scopefunapi.sfCreateSFContext

def sfCreateSDisplay():
    return _scopefunapi.sfCreateSDisplay()
sfCreateSDisplay = _scopefunapi.sfCreateSDisplay

def sfCreateSSimulate():
    return _scopefunapi.sfCreateSSimulate()
sfCreateSSimulate = _scopefunapi.sfCreateSSimulate

def sfCreateSFrameInfo():
    return _scopefunapi.sfCreateSFrameInfo()
sfCreateSFrameInfo = _scopefunapi.sfCreateSFrameInfo

def sfCreateSUsb():
    return _scopefunapi.sfCreateSUsb()
sfCreateSUsb = _scopefunapi.sfCreateSUsb

def sfCreateSHardware1():
    return _scopefunapi.sfCreateSHardware1()
sfCreateSHardware1 = _scopefunapi.sfCreateSHardware1

def sfCreateSHardware2():
    return _scopefunapi.sfCreateSHardware2()
sfCreateSHardware2 = _scopefunapi.sfCreateSHardware2

def sfCreateSFx2():
    return _scopefunapi.sfCreateSFx2()
sfCreateSFx2 = _scopefunapi.sfCreateSFx2

def sfCreateSFpga():
    return _scopefunapi.sfCreateSFpga()
sfCreateSFpga = _scopefunapi.sfCreateSFpga

def sfCreateSGenerator():
    return _scopefunapi.sfCreateSGenerator()
sfCreateSGenerator = _scopefunapi.sfCreateSGenerator

def sfCreateSEeprom():
    return _scopefunapi.sfCreateSEeprom()
sfCreateSEeprom = _scopefunapi.sfCreateSEeprom

def sfCreateSActiveClients():
    return _scopefunapi.sfCreateSActiveClients()
sfCreateSActiveClients = _scopefunapi.sfCreateSActiveClients

def sfCreateSFrameData(ctx, memory):
    return _scopefunapi.sfCreateSFrameData(ctx, memory)
sfCreateSFrameData = _scopefunapi.sfCreateSFrameData

def sfDeleteSFContext(INPUT):
    return _scopefunapi.sfDeleteSFContext(INPUT)
sfDeleteSFContext = _scopefunapi.sfDeleteSFContext

def sfDeleteSDisplay(INPUT):
    return _scopefunapi.sfDeleteSDisplay(INPUT)
sfDeleteSDisplay = _scopefunapi.sfDeleteSDisplay

def sfDeleteSSimulate(INPUT):
    return _scopefunapi.sfDeleteSSimulate(INPUT)
sfDeleteSSimulate = _scopefunapi.sfDeleteSSimulate

def sfDeleteSFrameInfo(INPUT):
    return _scopefunapi.sfDeleteSFrameInfo(INPUT)
sfDeleteSFrameInfo = _scopefunapi.sfDeleteSFrameInfo

def sfDeleteSFrameData(INPUT):
    return _scopefunapi.sfDeleteSFrameData(INPUT)
sfDeleteSFrameData = _scopefunapi.sfDeleteSFrameData

def sfDeleteSUsb(INPUT):
    return _scopefunapi.sfDeleteSUsb(INPUT)
sfDeleteSUsb = _scopefunapi.sfDeleteSUsb

def sfDeleteSHardware1(INPUT):
    return _scopefunapi.sfDeleteSHardware1(INPUT)
sfDeleteSHardware1 = _scopefunapi.sfDeleteSHardware1

def sfDeleteSHardware2(INPUT):
    return _scopefunapi.sfDeleteSHardware2(INPUT)
sfDeleteSHardware2 = _scopefunapi.sfDeleteSHardware2

def sfDeleteSFx2(INPUT):
    return _scopefunapi.sfDeleteSFx2(INPUT)
sfDeleteSFx2 = _scopefunapi.sfDeleteSFx2

def sfDeleteSFpga(INPUT):
    return _scopefunapi.sfDeleteSFpga(INPUT)
sfDeleteSFpga = _scopefunapi.sfDeleteSFpga

def sfDeleteSGenerator(INPUT):
    return _scopefunapi.sfDeleteSGenerator(INPUT)
sfDeleteSGenerator = _scopefunapi.sfDeleteSGenerator

def sfDeleteSEeprom(INPUT):
    return _scopefunapi.sfDeleteSEeprom(INPUT)
sfDeleteSEeprom = _scopefunapi.sfDeleteSEeprom

def sfDeleteSActiveClients(INPUT):
    return _scopefunapi.sfDeleteSActiveClients(INPUT)
sfDeleteSActiveClients = _scopefunapi.sfDeleteSActiveClients

def sfApiInit():
    return _scopefunapi.sfApiInit()
sfApiInit = _scopefunapi.sfApiInit

def sfApiCreateContext(INOUT, INPUT):
    return _scopefunapi.sfApiCreateContext(INOUT, INPUT)
sfApiCreateContext = _scopefunapi.sfApiCreateContext

def sfApiDeleteContext(INPUT):
    return _scopefunapi.sfApiDeleteContext(INPUT)
sfApiDeleteContext = _scopefunapi.sfApiDeleteContext

def sfApiVersion(INPUT):
    return _scopefunapi.sfApiVersion(INPUT)
sfApiVersion = _scopefunapi.sfApiVersion

def sfApiExit():
    return _scopefunapi.sfApiExit()
sfApiExit = _scopefunapi.sfApiExit

def sfIsUsb(INPUT):
    return _scopefunapi.sfIsUsb(INPUT)
sfIsUsb = _scopefunapi.sfIsUsb

def sfIsNetwork(INPUT):
    return _scopefunapi.sfIsNetwork(INPUT)
sfIsNetwork = _scopefunapi.sfIsNetwork

def sfIsSimulate(INPUT):
    return _scopefunapi.sfIsSimulate(INPUT)
sfIsSimulate = _scopefunapi.sfIsSimulate

def sfIsActive(INPUT):
    return _scopefunapi.sfIsActive(INPUT)
sfIsActive = _scopefunapi.sfIsActive

def sfIsConnected(INPUT):
    return _scopefunapi.sfIsConnected(INPUT)
sfIsConnected = _scopefunapi.sfIsConnected

def sfIsThreadSafe(INPUT):
    return _scopefunapi.sfIsThreadSafe(INPUT)
sfIsThreadSafe = _scopefunapi.sfIsThreadSafe

def sfSetThreadSafe(arg1, arg2):
    return _scopefunapi.sfSetThreadSafe(arg1, arg2)
sfSetThreadSafe = _scopefunapi.sfSetThreadSafe

def sfSetNetwork(INPUT):
    return _scopefunapi.sfSetNetwork(INPUT)
sfSetNetwork = _scopefunapi.sfSetNetwork

def sfSetUsb(INPUT):
    return _scopefunapi.sfSetUsb(INPUT)
sfSetUsb = _scopefunapi.sfSetUsb

def sfSetActive(arg1, arg2):
    return _scopefunapi.sfSetActive(arg1, arg2)
sfSetActive = _scopefunapi.sfSetActive

def sfSetTimeOut(arg1, arg2):
    return _scopefunapi.sfSetTimeOut(arg1, arg2)
sfSetTimeOut = _scopefunapi.sfSetTimeOut

def sfSetFrameVersion(arg1, arg2):
    return _scopefunapi.sfSetFrameVersion(arg1, arg2)
sfSetFrameVersion = _scopefunapi.sfSetFrameVersion

def sfSetFrameHeader(arg1, arg2):
    return _scopefunapi.sfSetFrameHeader(arg1, arg2)
sfSetFrameHeader = _scopefunapi.sfSetFrameHeader

def sfSetFrameData(arg1, arg2):
    return _scopefunapi.sfSetFrameData(arg1, arg2)
sfSetFrameData = _scopefunapi.sfSetFrameData

def sfSetFramePacket(arg1, arg2):
    return _scopefunapi.sfSetFramePacket(arg1, arg2)
sfSetFramePacket = _scopefunapi.sfSetFramePacket

def sfSetSimulateData(arg1, arg2):
    return _scopefunapi.sfSetSimulateData(arg1, arg2)
sfSetSimulateData = _scopefunapi.sfSetSimulateData

def sfSetSimulateOnOff(arg1, arg2):
    return _scopefunapi.sfSetSimulateOnOff(arg1, arg2)
sfSetSimulateOnOff = _scopefunapi.sfSetSimulateOnOff

def sfGetTimeOut(INPUT):
    return _scopefunapi.sfGetTimeOut(INPUT)
sfGetTimeOut = _scopefunapi.sfGetTimeOut

def sfGetFrameVersion(INPUT):
    return _scopefunapi.sfGetFrameVersion(INPUT)
sfGetFrameVersion = _scopefunapi.sfGetFrameVersion

def sfGetFrameHeader(INPUT):
    return _scopefunapi.sfGetFrameHeader(INPUT)
sfGetFrameHeader = _scopefunapi.sfGetFrameHeader

def sfGetFrameData(INPUT):
    return _scopefunapi.sfGetFrameData(INPUT)
sfGetFrameData = _scopefunapi.sfGetFrameData

def sfGetFramePacket(INPUT):
    return _scopefunapi.sfGetFramePacket(INPUT)
sfGetFramePacket = _scopefunapi.sfGetFramePacket

def sfGetClientDisplay(INPUT, INOUT):
    return _scopefunapi.sfGetClientDisplay(INPUT, INOUT)
sfGetClientDisplay = _scopefunapi.sfGetClientDisplay

def sfGetClientId(INPUT):
    return _scopefunapi.sfGetClientId(INPUT)
sfGetClientId = _scopefunapi.sfGetClientId

def sfGetClientActiveIds(INPUT, INOUT):
    return _scopefunapi.sfGetClientActiveIds(INPUT, INOUT)
sfGetClientActiveIds = _scopefunapi.sfGetClientActiveIds

def sfGetSimulateData(INPUT, INOUT):
    return _scopefunapi.sfGetSimulateData(INPUT, INOUT)
sfGetSimulateData = _scopefunapi.sfGetSimulateData

def sfClientConnect(arg1, arg2, arg3):
    return _scopefunapi.sfClientConnect(arg1, arg2, arg3)
sfClientConnect = _scopefunapi.sfClientConnect

def sfClientDisconnect(INPUT):
    return _scopefunapi.sfClientDisconnect(INPUT)
sfClientDisconnect = _scopefunapi.sfClientDisconnect

def sfClientDisplay(arg1, arg2, arg3):
    return _scopefunapi.sfClientDisplay(arg1, arg2, arg3)
sfClientDisplay = _scopefunapi.sfClientDisplay

def sfServerDownload(INPUT):
    return _scopefunapi.sfServerDownload(INPUT)
sfServerDownload = _scopefunapi.sfServerDownload

def sfServerUpload(INPUT):
    return _scopefunapi.sfServerUpload(INPUT)
sfServerUpload = _scopefunapi.sfServerUpload

def sfHardwareOpen(arg1, arg2, arg3):
    return _scopefunapi.sfHardwareOpen(arg1, arg2, arg3)
sfHardwareOpen = _scopefunapi.sfHardwareOpen

def sfHardwareIsOpened(INPUT):
    return _scopefunapi.sfHardwareIsOpened(INPUT)
sfHardwareIsOpened = _scopefunapi.sfHardwareIsOpened

def sfHardwareReset(INPUT):
    return _scopefunapi.sfHardwareReset(INPUT)
sfHardwareReset = _scopefunapi.sfHardwareReset

def sfHardwareConfig1(arg1, arg2):
    return _scopefunapi.sfHardwareConfig1(arg1, arg2)
sfHardwareConfig1 = _scopefunapi.sfHardwareConfig1

def sfHardwareConfig2(arg1, arg2):
    return _scopefunapi.sfHardwareConfig2(arg1, arg2)
sfHardwareConfig2 = _scopefunapi.sfHardwareConfig2

def sfHardwareCapture(arg1, INOUT, arg3, arg5):
    return _scopefunapi.sfHardwareCapture(arg1, INOUT, arg3, arg5)
sfHardwareCapture = _scopefunapi.sfHardwareCapture

def sfHardwareUploadFx2(arg1, arg2):
    return _scopefunapi.sfHardwareUploadFx2(arg1, arg2)
sfHardwareUploadFx2 = _scopefunapi.sfHardwareUploadFx2

def sfHardwareUploadFpga(arg1, arg2):
    return _scopefunapi.sfHardwareUploadFpga(arg1, arg2)
sfHardwareUploadFpga = _scopefunapi.sfHardwareUploadFpga

def sfHardwareUploadGenerator(arg1, arg2):
    return _scopefunapi.sfHardwareUploadGenerator(arg1, arg2)
sfHardwareUploadGenerator = _scopefunapi.sfHardwareUploadGenerator

def sfHardwareEepromRead(arg1, INOUT, arg3, arg4):
    return _scopefunapi.sfHardwareEepromRead(arg1, INOUT, arg3, arg4)
sfHardwareEepromRead = _scopefunapi.sfHardwareEepromRead

def sfHardwareEepromReadFirmwareID(arg1, INOUT, arg3, arg4):
    return _scopefunapi.sfHardwareEepromReadFirmwareID(arg1, INOUT, arg3, arg4)
sfHardwareEepromReadFirmwareID = _scopefunapi.sfHardwareEepromReadFirmwareID

def sfHardwareEepromWrite(arg1, arg2, arg3, arg4):
    return _scopefunapi.sfHardwareEepromWrite(arg1, arg2, arg3, arg4)
sfHardwareEepromWrite = _scopefunapi.sfHardwareEepromWrite

def sfHardwareEepromErase(INPUT):
    return _scopefunapi.sfHardwareEepromErase(INPUT)
sfHardwareEepromErase = _scopefunapi.sfHardwareEepromErase

def sfHardwareClose(INPUT):
    return _scopefunapi.sfHardwareClose(INPUT)
sfHardwareClose = _scopefunapi.sfHardwareClose

def sfSimulate(arg1, arg2):
    return _scopefunapi.sfSimulate(arg1, arg2)
sfSimulate = _scopefunapi.sfSimulate

def messageName(message):
    return _scopefunapi.messageName(message)
messageName = _scopefunapi.messageName

def clientMessageHeader(dest, message):
    return _scopefunapi.clientMessageHeader(dest, message)
clientMessageHeader = _scopefunapi.clientMessageHeader

def serverMessageHeader(dest, message):
    return _scopefunapi.serverMessageHeader(dest, message)
serverMessageHeader = _scopefunapi.serverMessageHeader

def isClientHeaderOk(header):
    return _scopefunapi.isClientHeaderOk(header)
isClientHeaderOk = _scopefunapi.isClientHeaderOk

def isServerHeaderOk(header):
    return _scopefunapi.isServerHeaderOk(header)
isServerHeaderOk = _scopefunapi.isServerHeaderOk
# This file is compatible with both classic and new-style classes.


